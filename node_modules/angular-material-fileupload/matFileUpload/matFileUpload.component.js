import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, Inject, forwardRef } from '@angular/core';
import { HttpClient, HttpEventType, HttpHeaders, HttpParams } from '@angular/common/http';
import { MatFileUploadQueue } from '../matFileUploadQueue/matFileUploadQueue.component';
/**
 * A material design file upload component.
 */
var MatFileUpload = /** @class */ (function () {
    function MatFileUpload(HttpClient, matFileUploadQueue) {
        this.HttpClient = HttpClient;
        this.matFileUploadQueue = matFileUploadQueue;
        this.isUploading = false;
        /* Http request input bindings */
        this.httpUrl = 'http://localhost:8080';
        this.httpRequestHeaders = new HttpHeaders();
        this.httpRequestParams = new HttpParams();
        this.fileAlias = "file";
        /** Output  */
        this.removeEvent = new EventEmitter();
        this.onUpload = new EventEmitter();
        this.progressPercentage = 0;
        this.loaded = 0;
        this.total = 0;
        if (matFileUploadQueue) {
            this.httpUrl = matFileUploadQueue.httpUrl || this.httpUrl;
            this.httpRequestHeaders = matFileUploadQueue.httpRequestHeaders || this.httpRequestHeaders;
            this.httpRequestParams = matFileUploadQueue.httpRequestParams || this.httpRequestParams;
            this.fileAlias = matFileUploadQueue.fileAlias || this.fileAlias;
        }
    }
    Object.defineProperty(MatFileUpload.prototype, "file", {
        get: function () {
            return this._file;
        },
        set: function (file) {
            this._file = file;
            this.total = this._file.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUpload.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (id) {
            this._id = id;
        },
        enumerable: true,
        configurable: true
    });
    MatFileUpload.prototype.upload = function () {
        var _this = this;
        this.isUploading = true;
        // How to set the alias?
        var formData = new FormData();
        formData.set(this.fileAlias, this._file, this._file.name);
        this.fileUploadSubscription = this.HttpClient.post(this.httpUrl, formData, {
            headers: this.httpRequestHeaders,
            observe: "events",
            params: this.httpRequestParams,
            reportProgress: true,
            responseType: "json"
        }).subscribe(function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                _this.progressPercentage = Math.floor(event.loaded * 100 / event.total);
                _this.loaded = event.loaded;
                _this.total = event.total;
            }
            _this.onUpload.emit({ file: _this._file, event: event });
        }, function (error) {
            if (_this.fileUploadSubscription) {
                _this.fileUploadSubscription.unsubscribe();
            }
            _this.isUploading = false;
            _this.onUpload.emit({ file: _this._file, event: event });
        });
    };
    MatFileUpload.prototype.remove = function () {
        if (this.fileUploadSubscription) {
            this.fileUploadSubscription.unsubscribe();
        }
        this.removeEvent.emit(this);
    };
    MatFileUpload.prototype.ngOnDestroy = function () {
        console.log('file ' + this._file.name + ' destroyed...');
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], MatFileUpload.prototype, "httpUrl", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], MatFileUpload.prototype, "httpRequestHeaders", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], MatFileUpload.prototype, "httpRequestParams", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], MatFileUpload.prototype, "fileAlias", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], MatFileUpload.prototype, "file", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], MatFileUpload.prototype, "id", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], MatFileUpload.prototype, "removeEvent", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], MatFileUpload.prototype, "onUpload", void 0);
    MatFileUpload = tslib_1.__decorate([
        Component({
            selector: 'mat-file-upload',
            template: "<mat-card>\n    <span class=\"file-info\">{{file.name}}({{file.size | bytes}})</span>\n    <section class=\"example-section\">\n        <mat-progress-bar class=\"example-margin\" [value]=\"progressPercentage\"></mat-progress-bar>\n        <a [ngClass]=\"{'disabled' : isUploading}\"><mat-icon class=\"action\" (click)=\"upload()\">file_upload</mat-icon></a>\n        <mat-icon class=\"action\" (click)=\"remove()\">cancel</mat-icon>\n    </section>\n    <span class=\"file-info\">{{progressPercentage}}%</span><span> {{loaded | bytes}} of {{total | bytes}}</span>\n</mat-card>",
            exportAs: 'matFileUpload',
            host: {
                'class': 'mat-file-upload',
            },
            styles: ["\n\n.dropzone {\n    background-color: brown;\n    width: 100px;\n    height: 100px;\n}\n\n\n\n\n.example-section {\n  display: flex;\n  align-content: center;\n  align-items: center;\n  height: 10px;\n}\n\n.file-info {\n  font-size: .85rem;\n}\n\n#drop_zone {\n  border: 5px solid blue;\n  width:  200px;\n  height: 100px;\n}\n\n.action {\n  cursor: pointer;\n  outline: none;\n}\n\na.disabled {\n  pointer-events: none;\n}\n\n.upload-drop-zone {\n  height: 200px;\n  border-width: 2px;\n  margin-bottom: 20px;\n}\n\n/* skin.css Style*/\n.upload-drop-zone {\n  color: #ccc;\n  border-style: dashed;\n  border-color: #ccc;\n  line-height: 200px;\n  text-align: center\n}\n.upload-drop-zone.drop {\n  color: #222;\n  border-color: #222;\n}"]
        }),
        tslib_1.__param(1, Inject(forwardRef(function () { return MatFileUploadQueue; }))),
        tslib_1.__metadata("design:paramtypes", [HttpClient,
            MatFileUploadQueue])
    ], MatFileUpload);
    return MatFileUpload;
}());
export { MatFileUpload };
//# sourceMappingURL=matFileUpload.component.js.map