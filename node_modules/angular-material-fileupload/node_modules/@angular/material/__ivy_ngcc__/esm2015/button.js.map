{"version":3,"file":"button.js","sources":["../../../src/lib/button/button.ts","../../../src/lib/button/button-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n"]}