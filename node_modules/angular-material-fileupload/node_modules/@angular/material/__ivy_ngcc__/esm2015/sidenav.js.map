{"version":3,"file":"sidenav.js","sources":["../../../src/lib/sidenav/drawer-animations.ts","../../../src/lib/sidenav/drawer.ts","../../../src/lib/sidenav/sidenav.ts","../../../src/lib/sidenav/sidenav-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n"]}