{"version":3,"file":"expansion.js","sources":["../../../src/lib/expansion/accordion-base.ts","../../../src/lib/expansion/expansion-animations.ts","../../../src/lib/expansion/expansion-panel-content.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/accordion.ts","../../../src/lib/expansion/expansion-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n"]}