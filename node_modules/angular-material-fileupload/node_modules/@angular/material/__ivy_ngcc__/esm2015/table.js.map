{"version":3,"file":"table.js","sources":["../../../src/lib/table/table.ts","../../../src/lib/table/cell.ts","../../../src/lib/table/row.ts","../../../src/lib/table/table-module.ts","../../../src/lib/table/table-data-source.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n"]}