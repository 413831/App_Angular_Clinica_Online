{"version":3,"file":"tree.js","sources":["../../../src/lib/tree/outlet.ts","../../../src/lib/tree/node.ts","../../../src/lib/tree/padding.ts","../../../src/lib/tree/tree.ts","../../../src/lib/tree/toggle.ts","../../../src/lib/tree/tree-module.ts","../../../src/lib/tree/data-source/flat-data-source.ts","../../../src/lib/tree/data-source/nested-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n"]}