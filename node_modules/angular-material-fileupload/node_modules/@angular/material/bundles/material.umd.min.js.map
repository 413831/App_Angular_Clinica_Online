{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.2.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    if (this._ngZone) {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["selector","providers","provide","CdkTreeNodePadding","useExisting","MatTreeNodePadding","level","type","Input","args","indent","MatTree","_super","tslib_1.__extends","Component","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","CdkTree","propDecorators","MatTreeNodeToggle","_this","apply","this","arguments","recursive","Directive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNode","MatTreeNodeOutlet","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","prototype","_flattenNode","node","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","_dir","changeDetectorRef","_dirChangeSubscription","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","MatTabBody","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","ngOnDestroy","unsubscribe","complete","_onTranslateTabStarted","isCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","inputs","[class.mat-tab-disabled]","[attr.aria-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","v","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","_ripplesGloballyDisabled","rippleConfig","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_a","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_left","mode","_width","_right","opened","_contentMargins","_contentMarginChanges","MatDrawerContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","fromEvent","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","_tooltipInstance","updatePosition","MatTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","_manualListeners","listener","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","_updatePosition","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_checkMenu","_handleHover","MatMenuTrigger","_handleTouchStart","passiveEventListenerOptions","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","triggersSubmenu","_menuItemInstance","_parentMenu","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","menu","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","_destroyMenu","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","hammerLoader","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","normalizePassiveListenerOptions","passive","_menuCloseSubscription","_menu","reason","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","MatExpansionModule","CdkAccordionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","align","[class.mat-card-actions-align-end]","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatLabel","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}