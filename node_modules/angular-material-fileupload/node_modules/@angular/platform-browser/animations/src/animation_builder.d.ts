/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { AnimationBuilder, AnimationFactory, AnimationMetadata, AnimationOptions, AnimationPlayer } from '@angular/animations';
import { RendererFactory2 } from '@angular/core';
import { AnimationRenderer } from './animation_renderer';
import * as ɵngcc0 from '@angular/core';
export declare class BrowserAnimationBuilder extends AnimationBuilder {
    private _nextAnimationId;
    private _renderer;
    constructor(rootRenderer: RendererFactory2, doc: any);
    build(animation: AnimationMetadata | AnimationMetadata[]): AnimationFactory;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BrowserAnimationBuilder, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BrowserAnimationBuilder>;
}
export declare class BrowserAnimationFactory extends AnimationFactory {
    private _id;
    private _renderer;
    constructor(_id: string, _renderer: AnimationRenderer);
    create(element: any, options?: AnimationOptions): AnimationPlayer;
}
export declare class RendererAnimationPlayer implements AnimationPlayer {
    id: string;
    element: any;
    private _renderer;
    parentPlayer: AnimationPlayer | null;
    private _started;
    constructor(id: string, element: any, options: AnimationOptions, _renderer: AnimationRenderer);
    private _listen;
    private _command;
    onDone(fn: () => void): void;
    onStart(fn: () => void): void;
    onDestroy(fn: () => void): void;
    init(): void;
    hasStarted(): boolean;
    play(): void;
    pause(): void;
    restart(): void;
    finish(): void;
    destroy(): void;
    reset(): void;
    setPosition(p: number): void;
    getPosition(): number;
    totalTime: number;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uX2J1aWxkZXIuZC50cyIsInNvdXJjZXMiOlsiYW5pbWF0aW9uX2J1aWxkZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEFuaW1hdGlvbkJ1aWxkZXIsIEFuaW1hdGlvbkZhY3RvcnksIEFuaW1hdGlvbk1ldGFkYXRhLCBBbmltYXRpb25PcHRpb25zLCBBbmltYXRpb25QbGF5ZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvblJlbmRlcmVyIH0gZnJvbSAnLi9hbmltYXRpb25fcmVuZGVyZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXIgZXh0ZW5kcyBBbmltYXRpb25CdWlsZGVyIHtcbiAgICBwcml2YXRlIF9uZXh0QW5pbWF0aW9uSWQ7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgY29uc3RydWN0b3Iocm9vdFJlbmRlcmVyOiBSZW5kZXJlckZhY3RvcnkyLCBkb2M6IGFueSk7XG4gICAgYnVpbGQoYW5pbWF0aW9uOiBBbmltYXRpb25NZXRhZGF0YSB8IEFuaW1hdGlvbk1ldGFkYXRhW10pOiBBbmltYXRpb25GYWN0b3J5O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnJvd3NlckFuaW1hdGlvbkZhY3RvcnkgZXh0ZW5kcyBBbmltYXRpb25GYWN0b3J5IHtcbiAgICBwcml2YXRlIF9pZDtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBjb25zdHJ1Y3RvcihfaWQ6IHN0cmluZywgX3JlbmRlcmVyOiBBbmltYXRpb25SZW5kZXJlcik7XG4gICAgY3JlYXRlKGVsZW1lbnQ6IGFueSwgb3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25QbGF5ZXI7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZW5kZXJlckFuaW1hdGlvblBsYXllciBpbXBsZW1lbnRzIEFuaW1hdGlvblBsYXllciB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBlbGVtZW50OiBhbnk7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgcGFyZW50UGxheWVyOiBBbmltYXRpb25QbGF5ZXIgfCBudWxsO1xuICAgIHByaXZhdGUgX3N0YXJ0ZWQ7XG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgZWxlbWVudDogYW55LCBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zLCBfcmVuZGVyZXI6IEFuaW1hdGlvblJlbmRlcmVyKTtcbiAgICBwcml2YXRlIF9saXN0ZW47XG4gICAgcHJpdmF0ZSBfY29tbWFuZDtcbiAgICBvbkRvbmUoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIG9uU3RhcnQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIG9uRGVzdHJveShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIGhhc1N0YXJ0ZWQoKTogYm9vbGVhbjtcbiAgICBwbGF5KCk6IHZvaWQ7XG4gICAgcGF1c2UoKTogdm9pZDtcbiAgICByZXN0YXJ0KCk6IHZvaWQ7XG4gICAgZmluaXNoKCk6IHZvaWQ7XG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIHJlc2V0KCk6IHZvaWQ7XG4gICAgc2V0UG9zaXRpb24ocDogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRQb3NpdGlvbigpOiBudW1iZXI7XG4gICAgdG90YWxUaW1lOiBudW1iZXI7XG59XG4iXX0=