{"version":3,"file":"overlay.js","sources":["../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../../src/cdk/overlay/position/scroll-clip.ts","../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../src/cdk/overlay/overlay-config.ts","../../../src/cdk/overlay/position/connected-position.ts","../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../../src/cdk/overlay/overlay-container.ts","../../../src/cdk/overlay/overlay-ref.ts","../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../src/cdk/overlay/position/global-position-strategy.ts","../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../src/cdk/overlay/overlay.ts","../../../src/cdk/overlay/overlay-directives.ts","../../../src/cdk/overlay/overlay-module.ts","../../../src/cdk/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config).forEach(k => {\n        const key = k as keyof OverlayConfig;\n\n        if (typeof config[key] !== 'undefined') {\n          this[key] = config[key];\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription, Observer} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  private _keydownEventsObservable: Observable<KeyboardEvent> =\n      new Observable((observer: Observer<KeyboardEvent>) => {\n        const subscription = this._keydownEvents.subscribe(observer);\n        this._keydownEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._keydownEventSubscriptions--;\n        };\n      });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      // @breaking-change 8.0.0 `_location` parameter to be made required.\n      private _location?: Location) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n\n    // Stop listening for location changes.\n    this._locationChanges.unsubscribe();\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach && backdropToDetach.parentNode) {\n        backdropToDetach.parentNode.removeChild(backdropToDetach);\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .asObservable()\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject, Observer} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray, coerceElement} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Amount of subscribers to the `positionChanges` stream. */\n  private _positionChangeSubscriptions = 0;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      new Observable((observer: Observer<ConnectedOverlayPositionChange>) => {\n        const subscription = this._positionChanges.subscribe(observer);\n        this._positionChangeSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._positionChangeSubscriptions--;\n        };\n      });\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: ElementRef | HTMLElement,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    private _platform?: Platform,\n    private _overlayContainer?: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef | HTMLElement): this {\n    this._origin = coerceElement(origin);\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width < viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height < viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // @breaking-change 8.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n    let virtualKeyboardOffset = this._overlayContainer ?\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n      this._appliedPanelClasses = [];\n    }\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>,\n      viewportRuler: ViewportRuler,\n      document: Document,\n      // @breaking-change 8.0.0 `platform` parameter to be made required.\n      platform?: Platform) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              // @breaking-change 8.0.0 `_location` parameter to be made required.\n              @Optional() private _location?: Location) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n"]}