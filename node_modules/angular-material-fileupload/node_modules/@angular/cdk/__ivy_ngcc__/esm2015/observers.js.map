{"version":3,"file":"observers.js","sources":["../../../src/cdk/observers/observe-content.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n"]}