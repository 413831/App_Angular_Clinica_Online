{"version":3,"file":"text-field.js","sources":["../../../src/cdk/text-field/autofill.ts","../../../src/cdk/text-field/autosize.ts","../../../src/cdk/text-field/text-field-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {EMPTY, Observable, Subject} from 'rxjs';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable({providedIn: 'root'})\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent>;\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = ((event: AnimationEvent) => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\n          !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\n          element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\n      }\n    }) as EventListenerOrEventListenerObject;\n\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element): void;\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<Element>): void;\n\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  /** Emits when the autofill state of the element changes. */\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\n\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | null;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _platform: Platform,\n    private _ngZone: NgZone) {\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    this._textareaElement.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add('cdk-textarea-autosize-measuring');\n    textarea.placeholder = '';\n\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const height = textarea.scrollHeight - 4;\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\n    textarea.placeholder = placeholderText;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to it's original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight === undefined) {\n      return;\n    }\n    this._textareaElement.style.height = this._initialHeight;\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n\n@NgModule({\n  declarations: [CdkAutofill, CdkTextareaAutosize],\n  imports: [PlatformModule],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n})\nexport class TextFieldModule {}\n"]}