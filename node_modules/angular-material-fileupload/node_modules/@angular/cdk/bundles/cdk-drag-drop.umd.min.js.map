{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, OnDestroy {\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    // @breaking-change 8.0.0 `_document` parameter to be made required.\n    @Optional() @Inject(DOCUMENT) _document?: any) {\n\n\n    // @breaking-change 8.0.0 Remove || once `_document` parameter is required.\n    const ref = this._dropListRef = new DropListRef(element, dragDropRegistry,\n        _document || document, dir);\n    ref.data = this;\n    ref.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n    this._syncInputs(ref);\n    this._handleEvents(ref);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n    this._dropListRef.dispose();\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.lockAxis = this.lockAxis;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation)\n        .withItems(this._draggables.map(drag => drag._dragRef));\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: {template: TemplateRef<any> | null, context?: any};\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: {template: TemplateRef<any> | null, context?: any};\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _config: DragRefConfig,\n    /** Droppable container that the draggable is a part of. */\n    public dropContainer?: DropListRef,\n    private _dir?: Directionality) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   * @param context Variables to add to the template's context.\n   */\n  withPreviewTemplate(template: TemplateRef<any> | null, context?: any): this {\n    this._previewTemplate = {template, context};\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   * @param context Variables to add to the template's context.\n   */\n  withPlaceholderTemplate(template: TemplateRef<any> | null, context?: any): this {\n    this._placeholderTemplate = {template, context};\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this.dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this.dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this.dropContainer!});\n        this.dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewTemplate = this._previewTemplate;\n    let preview: HTMLElement;\n\n    if (previewTemplate && previewTemplate.template) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(previewTemplate.template,\n                                                                previewTemplate.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderTemplate = this._placeholderTemplate;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate && placeholderTemplate.template) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        placeholderTemplate.template,\n        placeholderTemplate.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) private _config: DragRefConfig,\n    @Optional() private _dir: Directionality) {\n\n    const ref = this._dragRef = new DragRef(element, this._document, this._ngZone,\n      this._viewContainerRef, this._viewportRuler, this._dragDropRegistry,\n      this._config, this.dropContainer ? this.dropContainer._dropListRef : undefined,\n      this._dir);\n    ref.data = this;\n    this._syncInputs(ref);\n    this._proxyEvents(ref);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes.rootElementSelector;\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const {_placeholderTemplate: placeholder, _previewTemplate: preview} = this;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.withBoundaryElement(this._getBoundaryElement());\n        placeholder ? ref.withPlaceholderTemplate(placeholder.templateRef, placeholder.data) :\n                      ref.withPlaceholderTemplate(null);\n        preview ? ref.withPreviewTemplate(preview.templateRef, preview.data) :\n                  ref.withPreviewTemplate(null);\n      }\n    });\n  }\n\n  /**\n   * Proxies the events from a DragRef to events that\n   * match the interfaces of the CdkDrag outputs.\n   */\n  private _proxyEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: DragRef[];\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: DropListRef[] = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any,\n    private _dir?: Directionality) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cacheOwnPosition();\n    this._cacheItemPositions();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items.slice();\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.nativeElement.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const element = this.element.nativeElement;\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === element || element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n"],"names":["CdkDropList","prototype","_sortItem","item","pointerX","pointerY","pointerDelta","this","_dropListRef","_dragRef","_getSiblingContainerFromPosition","x","y","result","data","_isOverContainer","_syncInputs","ref","_this","beforeStarted","subscribe","siblings","coerceArray","connectedTo","map","drop","_dropLists","find","list","id","_group","_items","forEach","indexOf","push","lockAxis","filter","withOrientation","orientation","withItems","_draggables","drag","_handleEvents","_changeDetectorRef","markForCheck","entered","event","emit","container","exited","sorted","previousIndex","currentIndex","dropped","previousContainer","isPointerOverContainer","type","Directive","args","selector","exportAs","providers","provide","CdkDropListGroup","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDropRegistry","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","Inject","DOCUMENT","ContentChildren","forwardRef","CdkDrag","Input","disabled","enterPredicate","Output","DragDropModule","NgModule","declarations","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","value","max","Math","min","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","round","deepCloneNode","node","clone","cloneNode","removeAttribute","removeElement","parentNode","removeChild","isTouchEvent","startsWith","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DROP_LIST","InjectionToken","activeCapturingEventOptions","normalizePassiveListenerOptions","passive","capture","_ngZone","_document","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventDefaultWhileDragging","size","preventDefault","registerDropContainer","has","getDropContainer","Error","add","registerDragItem","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","moveEvent","upEvent","set","handler","e","next","options","config","_clearGlobalListeners","isDragging","Array","instance","ngOnDestroy","complete","clear","Injectable","providedIn","NgZone","CDK_DRAG_PARENT","parentDrag","_stateChanges","_disabled","_parentDrag","nativeElement","Object","defineProperty","coerceBooleanProperty","templateRef","TemplateRef","passiveEventListenerOptions","activeEventListenerOptions","DragRef","_viewContainerRef","_viewportRuler","_dragDropRegistry","_config","dropContainer","_dir","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","started","released","ended","moved","Observable","observer","subscription","unsubscribe","_pointerDown","targetHandle","handle","contains","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","_removeSubscriptions","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","context","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","withBoundaryElement","boundaryElement","dispose","_destroyPreview","_destroyPlaceholder","_nextSibling","reset","disableHandle","enableHandle","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","Date","now","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","insertBefore","getItemIndex","_a","newContainer","exit","enter","previewTemplate","viewRef","createEmbeddedView","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","CDK_DRAG_CONFIG","factory","_destroyed","EventEmitter","pipe","movedEvent","_proxyEvents","ngAfterViewInit","onStable","asObservable","take","takeUntil","_updateRootElement","changes","startWith","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","rootElementSelector","firstChange","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundaryElementSelector","[class.cdk-drag-dragging]","ViewContainerRef","ViewportRuler","descendants","ContentChild","_uniqueIdCounter","DropListRef","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","_activeDraggables","slice","_cacheOwnPosition","_cacheItemPositions","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","newPositionReference","_reset","items","reverse","currentItem","isReceiving","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","direction","floor","_canReceive","elementFromPoint","activeSiblings","dragDropRegistry","dir","document"],"mappings":"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"}