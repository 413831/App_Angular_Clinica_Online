import { BehaviorSubject, Observable } from 'rxjs';
import { LatLng, LatLngBounds, LatLngLiteral } from './google-maps-types';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
import * as ɵngcc0 from '@angular/core';
export interface FitBoundsDetails {
    latLng: LatLng | LatLngLiteral;
}
/**
 * @internal
 */
export declare type BoundsMap = Map<string, LatLng | LatLngLiteral>;
/**
 * Class to implement when you what to be able to make it work with the auto fit bounds feature
 * of AGM.
 */
export declare abstract class FitBoundsAccessor {
    abstract getFitBoundsDetails$(): Observable<FitBoundsDetails>;
}
/**
 * The FitBoundsService is responsible for computing the bounds of the a single map.
 */
export declare class FitBoundsService {
    protected readonly bounds$: Observable<LatLngBounds>;
    protected readonly _boundsChangeSampleTime$: BehaviorSubject<number>;
    protected readonly _includeInBounds$: BehaviorSubject<Map<string, LatLng | LatLngLiteral>>;
    constructor(loader: MapsAPILoader);
    private _generateBounds;
    addToBounds(latLng: LatLng | LatLngLiteral): void;
    removeFromBounds(latLng: LatLng | LatLngLiteral): void;
    changeFitBoundsChangeSampleTime(timeMs: number): void;
    getBounds$(): Observable<LatLngBounds>;
    protected _createIdentifier(latLng: LatLng | LatLngLiteral): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FitBoundsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FitBoundsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml0LWJvdW5kcy5kLnRzIiwic291cmNlcyI6WyJmaXQtYm91bmRzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGF0TG5nLCBMYXRMbmdCb3VuZHMsIExhdExuZ0xpdGVyYWwgfSBmcm9tICcuL2dvb2dsZS1tYXBzLXR5cGVzJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICcuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXInO1xuZXhwb3J0IGludGVyZmFjZSBGaXRCb3VuZHNEZXRhaWxzIHtcbiAgICBsYXRMbmc6IExhdExuZyB8IExhdExuZ0xpdGVyYWw7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIEJvdW5kc01hcCA9IE1hcDxzdHJpbmcsIExhdExuZyB8IExhdExuZ0xpdGVyYWw+O1xuLyoqXG4gKiBDbGFzcyB0byBpbXBsZW1lbnQgd2hlbiB5b3Ugd2hhdCB0byBiZSBhYmxlIHRvIG1ha2UgaXQgd29yayB3aXRoIHRoZSBhdXRvIGZpdCBib3VuZHMgZmVhdHVyZVxuICogb2YgQUdNLlxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBGaXRCb3VuZHNBY2Nlc3NvciB7XG4gICAgYWJzdHJhY3QgZ2V0Rml0Qm91bmRzRGV0YWlscyQoKTogT2JzZXJ2YWJsZTxGaXRCb3VuZHNEZXRhaWxzPjtcbn1cbi8qKlxuICogVGhlIEZpdEJvdW5kc1NlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGluZyB0aGUgYm91bmRzIG9mIHRoZSBhIHNpbmdsZSBtYXAuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpdEJvdW5kc1NlcnZpY2Uge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBib3VuZHMkOiBPYnNlcnZhYmxlPExhdExuZ0JvdW5kcz47XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9ib3VuZHNDaGFuZ2VTYW1wbGVUaW1lJDogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pbmNsdWRlSW5Cb3VuZHMkOiBCZWhhdmlvclN1YmplY3Q8TWFwPHN0cmluZywgTGF0TG5nIHwgTGF0TG5nTGl0ZXJhbD4+O1xuICAgIGNvbnN0cnVjdG9yKGxvYWRlcjogTWFwc0FQSUxvYWRlcik7XG4gICAgcHJpdmF0ZSBfZ2VuZXJhdGVCb3VuZHM7XG4gICAgYWRkVG9Cb3VuZHMobGF0TG5nOiBMYXRMbmcgfCBMYXRMbmdMaXRlcmFsKTogdm9pZDtcbiAgICByZW1vdmVGcm9tQm91bmRzKGxhdExuZzogTGF0TG5nIHwgTGF0TG5nTGl0ZXJhbCk6IHZvaWQ7XG4gICAgY2hhbmdlRml0Qm91bmRzQ2hhbmdlU2FtcGxlVGltZSh0aW1lTXM6IG51bWJlcik6IHZvaWQ7XG4gICAgZ2V0Qm91bmRzJCgpOiBPYnNlcnZhYmxlPExhdExuZ0JvdW5kcz47XG4gICAgcHJvdGVjdGVkIF9jcmVhdGVJZGVudGlmaWVyKGxhdExuZzogTGF0TG5nIHwgTGF0TG5nTGl0ZXJhbCk6IHN0cmluZztcbn1cbiJdfQ==