/// <reference types="grecaptcha" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { RecaptchaLoaderService } from './recaptcha-loader.service';
import { RecaptchaSettings } from './recaptcha-settings';
import * as ɵngcc0 from '@angular/core';
export declare class RecaptchaComponent implements AfterViewInit, OnDestroy {
    private elementRef;
    private loader;
    private zone;
    id: string;
    siteKey: string;
    theme: ReCaptchaV2.Theme;
    type: ReCaptchaV2.Type;
    size: ReCaptchaV2.Size;
    tabIndex: number;
    badge: ReCaptchaV2.Badge;
    resolved: EventEmitter<string>;
    constructor(elementRef: ElementRef, loader: RecaptchaLoaderService, zone: NgZone, settings?: RecaptchaSettings);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Executes the invisible recaptcha.
     * Does nothing if component's size is not set to "invisible".
     */
    execute(): void;
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecaptchaComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RecaptchaComponent, "re-captcha", ["reCaptcha"], { "id": "id"; "siteKey": "siteKey"; "theme": "theme"; "type": "type"; "size": "size"; "badge": "badge"; "tabIndex": "tabIndex"; }, { "resolved": "resolved"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJyZWNhcHRjaGEuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZ3JlY2FwdGNoYVwiIC8+XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZWNhcHRjaGFMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9yZWNhcHRjaGEtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVjYXB0Y2hhU2V0dGluZ3MgfSBmcm9tICcuL3JlY2FwdGNoYS1zZXR0aW5ncyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZWNhcHRjaGFDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGxvYWRlcjtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgaWQ6IHN0cmluZztcbiAgICBzaXRlS2V5OiBzdHJpbmc7XG4gICAgdGhlbWU6IFJlQ2FwdGNoYVYyLlRoZW1lO1xuICAgIHR5cGU6IFJlQ2FwdGNoYVYyLlR5cGU7XG4gICAgc2l6ZTogUmVDYXB0Y2hhVjIuU2l6ZTtcbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIGJhZGdlOiBSZUNhcHRjaGFWMi5CYWRnZTtcbiAgICByZXNvbHZlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgbG9hZGVyOiBSZWNhcHRjaGFMb2FkZXJTZXJ2aWNlLCB6b25lOiBOZ1pvbmUsIHNldHRpbmdzPzogUmVjYXB0Y2hhU2V0dGluZ3MpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGludmlzaWJsZSByZWNhcHRjaGEuXG4gICAgICogRG9lcyBub3RoaW5nIGlmIGNvbXBvbmVudCdzIHNpemUgaXMgbm90IHNldCB0byBcImludmlzaWJsZVwiLlxuICAgICAqL1xuICAgIGV4ZWN1dGUoKTogdm9pZDtcbiAgICByZXNldCgpOiB2b2lkO1xufVxuIl19