{"version":3,"file":"ng-recaptcha.js","sources":["ng:/ng-recaptcha/recaptcha/recaptcha-loader.service.ts","ng:/ng-recaptcha/recaptcha/recaptcha-settings.ts","ng:/ng-recaptcha/recaptcha/recaptcha.component.ts","ng:/ng-recaptcha/recaptcha/recaptcha-common.module.ts","ng:/ng-recaptcha/recaptcha/recaptcha.module.ts","ng:/ng-recaptcha/recaptcha/recaptcha-v3.service.ts","ng:/ng-recaptcha/recaptcha/recaptcha-v3.module.ts","ng:/ng-recaptcha/recaptcha/recaptcha-value-accessor.directive.ts","ng:/ng-recaptcha/recaptcha/recaptcha-forms.module.ts","ng:/ng-recaptcha/ng-recaptcha.ts"],"names":["tslib_1.__param","tslib_1.__decorate"],"mappings":"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","sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nexport const RECAPTCHA_LANGUAGE = new InjectionToken<string>('recaptcha-language');\nexport const RECAPTCHA_BASE_URL = new InjectionToken<string>('recaptcha-base-url');\nexport const RECAPTCHA_NONCE = new InjectionToken<string>('recaptcha-nonce-tag');\n\ndeclare global {\n  interface Window {\n    ng2recaptchaloaded: () => void;\n  }\n}\n\nexport function loadScript(\n  renderMode: 'explicit' | string,\n  onLoaded: (grecaptcha: ReCaptchaV2.ReCaptcha) => void,\n  urlParams: string,\n  url?: string,\n  nonce?: string,\n) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement('script');\n  script.innerHTML = '';\n  const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n  if (nonce) {\n    // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n    (script as any).nonce = nonce;\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\n@Injectable()\nexport class RecaptchaLoaderService {\n  /**\n   * @internal\n   * @nocollapse\n   */\n  private static ready: BehaviorSubject<ReCaptchaV2.ReCaptcha> = null;\n\n  public ready: Observable<ReCaptchaV2.ReCaptcha>;\n\n  /** @internal */\n  private language: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private nonce: string;\n\n  constructor(\n    // tslint:disable-next-line:no-any\n    @Inject(PLATFORM_ID) private readonly platformId: any,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n  ) {\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n  }\n\n  /** @internal */\n  private init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject<ReCaptchaV2.ReCaptcha>(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? '&hl=' + this.language : '';\n      loadScript('explicit', (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const RECAPTCHA_SETTINGS = new InjectionToken<RecaptchaSettings>('recaptcha-settings');\n\nexport interface RecaptchaSettings {\n  siteKey?: string;\n  theme?: ReCaptchaV2.Theme;\n  type?: ReCaptchaV2.Type;\n  size?: ReCaptchaV2.Size;\n  badge?: ReCaptchaV2.Badge;\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { RecaptchaLoaderService } from './recaptcha-loader.service';\nimport { RECAPTCHA_SETTINGS, RecaptchaSettings } from './recaptcha-settings';\n\nlet nextId = 0;\n\n@Component({\n  exportAs: 'reCaptcha',\n  selector: 're-captcha',\n  template: ``,\n})\nexport class RecaptchaComponent implements AfterViewInit, OnDestroy {\n  @Input()\n  @HostBinding('attr.id')\n  public id = `ngrecaptcha-${nextId++}`;\n\n  @Input() public siteKey: string;\n  @Input() public theme: ReCaptchaV2.Theme;\n  @Input() public type: ReCaptchaV2.Type;\n  @Input() public size: ReCaptchaV2.Size;\n  @Input() public tabIndex: number;\n  @Input() public badge: ReCaptchaV2.Badge;\n\n  @Output() public resolved = new EventEmitter<string>();\n\n  /** @internal */\n  private subscription: Subscription;\n  /** @internal */\n  private widget: number;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n  /** @internal */\n  private executeRequested: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private loader: RecaptchaLoaderService,\n    private zone: NgZone,\n    @Optional() @Inject(RECAPTCHA_SETTINGS) settings?: RecaptchaSettings,\n  ) {\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n\n  public ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe((grecaptcha: ReCaptchaV2.ReCaptcha) => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n\n  public ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  public execute(): void {\n    if (this.size !== 'invisible') {\n      return;\n    }\n\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n\n  public reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n\n      this.grecaptchaReset();\n    }\n  }\n\n  /** @internal */\n  private expired() {\n    this.resolved.emit(null);\n  }\n\n  /** @internal */\n  private captchaResponseCallback(response: string) {\n    this.resolved.emit(response);\n  }\n\n  /** @internal */\n  private grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n\n  /** @internal */\n  private renderRecaptcha() {\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n      badge: this.badge,\n      callback: (response: string) => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      'expired-callback': () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type,\n    });\n\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { RecaptchaComponent } from './recaptcha.component';\n\n@NgModule({\n  declarations: [\n    RecaptchaComponent,\n  ],\n  exports: [\n    RecaptchaComponent,\n  ],\n})\nexport class RecaptchaCommonModule {\n}\n","import { NgModule } from '@angular/core';\n\nimport { RecaptchaCommonModule } from './recaptcha-common.module';\nimport { RecaptchaLoaderService } from './recaptcha-loader.service';\nimport { RecaptchaComponent } from './recaptcha.component';\n\n@NgModule({\n  exports: [\n    RecaptchaComponent,\n  ],\n  imports: [\n    RecaptchaCommonModule,\n  ],\n  providers: [\n    RecaptchaLoaderService,\n  ],\n})\nexport class RecaptchaModule {\n  // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n  public static forRoot() {\n    return RecaptchaModule;\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { loadScript, RECAPTCHA_BASE_URL, RECAPTCHA_NONCE } from './recaptcha-loader.service';\n\nexport const RECAPTCHA_V3_SITE_KEY = new InjectionToken<string>('recaptcha-v3-site-key');\n\nexport interface OnExecuteData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The token that reCAPTCHA v3 provided when executing the action.\n   */\n  token: string;\n}\n\ntype ActionBacklogEntry = [string, Subject<string>];\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\n@Injectable()\nexport class ReCaptchaV3Service {\n  /** @internal */\n  private readonly isBrowser: boolean;\n  /** @internal */\n  private readonly siteKey: string;\n  /** @internal */\n  private readonly zone: NgZone;\n  /** @internal */\n  private actionBacklog: ActionBacklogEntry[] | undefined;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n\n  /** @internal */\n  private onExecuteSubject: Subject<OnExecuteData>;\n  /** @internal */\n  private onExecuteObservable: Observable<OnExecuteData>;\n\n  constructor(\n    zone: NgZone,\n    @Inject(RECAPTCHA_V3_SITE_KEY) siteKey: string,\n    // tslint:disable-next-line:no-any\n    @Inject(PLATFORM_ID) platformId: any,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n  ) {\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.baseUrl = baseUrl;\n\n    this.init();\n  }\n\n  public get onExecute(): Observable<OnExecuteData> {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject<OnExecuteData>();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n\n    return this.onExecuteObservable;\n  }\n\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  public execute(action: string): Observable<string> {\n    const subject = new Subject<string>();\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        // todo: add to array of later executions\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n\n    return subject.asObservable();\n  }\n\n  /** @internal */\n  private executeActionWithSubject(action: string, subject: Subject<string>): void {\n    this.zone.runOutsideAngular(() => {\n      // tslint:disable-next-line:no-any\n      (this.grecaptcha.execute as any)(\n        this.siteKey,\n        { action },\n      ).then((token: string) => {\n        this.zone.run(() => {\n          subject.next(token);\n          subject.complete();\n          if (this.onExecuteSubject) {\n            this.onExecuteSubject.next({ action, token });\n          }\n        });\n      });\n    });\n  }\n\n  /** @internal */\n  private init() {\n    if (this.isBrowser) {\n      if ('grecaptcha' in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n      }\n    }\n  }\n\n  /** @internal */\n  private onLoadComplete = (grecaptcha: ReCaptchaV2.ReCaptcha) => {\n    this.grecaptcha = grecaptcha;\n    if (this.actionBacklog && this.actionBacklog.length > 0) {\n      this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n      this.actionBacklog = undefined;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ReCaptchaV3Service } from './recaptcha-v3.service';\n\n@NgModule({\n  providers: [\n    ReCaptchaV3Service,\n  ],\n})\nexport class RecaptchaV3Module {\n}\n","import {\n  Directive,\n  forwardRef,\n  HostListener,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\nimport { RecaptchaComponent } from './recaptcha.component';\n\n@Directive({\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n    },\n  ],\n  // tslint:disable-next-line:directive-selector\n  selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n})\nexport class RecaptchaValueAccessorDirective implements ControlValueAccessor {\n  /** @internal */\n  private onChange: (value: string) => void;\n\n  /** @internal */\n  private onTouched: () => void;\n\n  constructor(private host: RecaptchaComponent) { }\n\n  public writeValue(value: string): void {\n    if (!value) {\n      this.host.reset();\n    }\n  }\n\n  public registerOnChange(fn: (value: string) => void): void { this.onChange = fn; }\n  public registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  @HostListener('resolved', ['$event']) public onResolve($event: string) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { RecaptchaCommonModule } from './recaptcha-common.module';\nimport { RecaptchaValueAccessorDirective } from './recaptcha-value-accessor.directive';\n\n@NgModule({\n  declarations: [\n    RecaptchaValueAccessorDirective,\n  ],\n  exports: [RecaptchaValueAccessorDirective],\n  imports: [FormsModule, RecaptchaCommonModule],\n})\nexport class RecaptchaFormsModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {RecaptchaCommonModule as Éµa} from './recaptcha/recaptcha-common.module';"]}