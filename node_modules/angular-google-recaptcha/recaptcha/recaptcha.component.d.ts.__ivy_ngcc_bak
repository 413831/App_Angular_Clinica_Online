import { ControlValueAccessor, NgControl } from '@angular/forms';
import { EventEmitter, ElementRef, OnInit, NgZone, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { RecaptchaModuleConfig } from './recaptcha.module';
export interface InjectAndLoadScriptConfig {
    scriptSrc: string;
    onLoadCallback(): void;
    onErrorCallback(err: ErrorEvent): void;
}
export declare class ScriptLoaderService {
    injectAndLoadScript(config: InjectAndLoadScriptConfig): void;
}
export declare class RecaptchaComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private recaptchaConfig;
    private controlDir;
    private scriptLoaderService;
    private zone;
    private cd;
    scriptLoad: EventEmitter<void>;
    scriptError: EventEmitter<ErrorEvent>;
    container: ElementRef;
    private readonly GLOBAL_ON_LOAD_CALLBACK_NAME;
    private onChange;
    private onTouched;
    private activeRecaptchaId;
    private recaptchaAPI;
    constructor(recaptchaConfig: RecaptchaModuleConfig, controlDir: NgControl, scriptLoaderService: ScriptLoaderService, zone: NgZone, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * There is currently no way to programmatically set the value of
     * a visible reCAPTCHA, so this is a noop
     */
    writeValue(val: any): void;
    /**
     * Required method of the ControlValueAccessor interface, we register the callback
     * function that should be called whenever the model value changes
     */
    registerOnChange(fn: (val: any) => void): void;
    /**
     * Required method of the ControlValueAccessor interface, we register the callback
     * function that should be called whenever the control is "touched"
     */
    registerOnTouched(fn: () => void): void;
    /**
     * Unfortunately we have to register a global handler for the onload
     * event from the recaptcha lib
     */
    private setGlobalHandlers();
    private unsetGlobalHandlers();
    /**
     * Create a <script> element and inject it into the page in order
     * to load the recaptcha lib. Emit load or error events from the relevant
     * Outputs to the component
     */
    private injectGoogleRecaptchaScript();
    /**
     * Use the recaptcha lib to manually render a recaptcha widget with the ViewChild
     * container element, passing the relevant callbacks and configuration options
     */
    private renderRecaptcha();
    /**
     * Handler which will be registered with the recaptcha lib to be called
     * whenever it has a valid status
     */
    private onRecaptchaValidCallback();
    /**
     * Handler which will be registered with the recaptcha lib to be called
     * whenever its valid status expires
     */
    private onRecaptchaExpiredCallback();
}
