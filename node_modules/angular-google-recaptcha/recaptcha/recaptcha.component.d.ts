import { ControlValueAccessor, NgControl } from '@angular/forms';
import { EventEmitter, ElementRef, OnInit, NgZone, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { RecaptchaModuleConfig } from './recaptcha.module';
import * as ɵngcc0 from '@angular/core';
export interface InjectAndLoadScriptConfig {
    scriptSrc: string;
    onLoadCallback(): void;
    onErrorCallback(err: ErrorEvent): void;
}
export declare class ScriptLoaderService {
    injectAndLoadScript(config: InjectAndLoadScriptConfig): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScriptLoaderService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ScriptLoaderService>;
}
export declare class RecaptchaComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private recaptchaConfig;
    private controlDir;
    private scriptLoaderService;
    private zone;
    private cd;
    scriptLoad: EventEmitter<void>;
    scriptError: EventEmitter<ErrorEvent>;
    container: ElementRef;
    private readonly GLOBAL_ON_LOAD_CALLBACK_NAME;
    private onChange;
    private onTouched;
    private activeRecaptchaId;
    private recaptchaAPI;
    constructor(recaptchaConfig: RecaptchaModuleConfig, controlDir: NgControl, scriptLoaderService: ScriptLoaderService, zone: NgZone, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * There is currently no way to programmatically set the value of
     * a visible reCAPTCHA, so this is a noop
     */
    writeValue(val: any): void;
    /**
     * Required method of the ControlValueAccessor interface, we register the callback
     * function that should be called whenever the model value changes
     */
    registerOnChange(fn: (val: any) => void): void;
    /**
     * Required method of the ControlValueAccessor interface, we register the callback
     * function that should be called whenever the control is "touched"
     */
    registerOnTouched(fn: () => void): void;
    /**
     * Unfortunately we have to register a global handler for the onload
     * event from the recaptcha lib
     */
    private setGlobalHandlers();
    private unsetGlobalHandlers();
    /**
     * Create a <script> element and inject it into the page in order
     * to load the recaptcha lib. Emit load or error events from the relevant
     * Outputs to the component
     */
    private injectGoogleRecaptchaScript();
    /**
     * Use the recaptcha lib to manually render a recaptcha widget with the ViewChild
     * container element, passing the relevant callbacks and configuration options
     */
    private renderRecaptcha();
    /**
     * Handler which will be registered with the recaptcha lib to be called
     * whenever it has a valid status
     */
    private onRecaptchaValidCallback();
    /**
     * Handler which will be registered with the recaptcha lib to be called
     * whenever its valid status expires
     */
    private onRecaptchaExpiredCallback();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecaptchaComponent, [null, { optional: true; self: true; }, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RecaptchaComponent, "recaptcha", never, {}, { "scriptLoad": "scriptLoad"; "scriptError": "scriptError"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJyZWNhcHRjaGEuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgT25Jbml0LCBOZ1pvbmUsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlY2FwdGNoYU1vZHVsZUNvbmZpZyB9IGZyb20gJy4vcmVjYXB0Y2hhLm1vZHVsZSc7XG5leHBvcnQgaW50ZXJmYWNlIEluamVjdEFuZExvYWRTY3JpcHRDb25maWcge1xuICAgIHNjcmlwdFNyYzogc3RyaW5nO1xuICAgIG9uTG9hZENhbGxiYWNrKCk6IHZvaWQ7XG4gICAgb25FcnJvckNhbGxiYWNrKGVycjogRXJyb3JFdmVudCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTY3JpcHRMb2FkZXJTZXJ2aWNlIHtcbiAgICBpbmplY3RBbmRMb2FkU2NyaXB0KGNvbmZpZzogSW5qZWN0QW5kTG9hZFNjcmlwdENvbmZpZyk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZWNhcHRjaGFDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByaXZhdGUgcmVjYXB0Y2hhQ29uZmlnO1xuICAgIHByaXZhdGUgY29udHJvbERpcjtcbiAgICBwcml2YXRlIHNjcmlwdExvYWRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgc2NyaXB0TG9hZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIHNjcmlwdEVycm9yOiBFdmVudEVtaXR0ZXI8RXJyb3JFdmVudD47XG4gICAgY29udGFpbmVyOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgR0xPQkFMX09OX0xPQURfQ0FMTEJBQ0tfTkFNRTtcbiAgICBwcml2YXRlIG9uQ2hhbmdlO1xuICAgIHByaXZhdGUgb25Ub3VjaGVkO1xuICAgIHByaXZhdGUgYWN0aXZlUmVjYXB0Y2hhSWQ7XG4gICAgcHJpdmF0ZSByZWNhcHRjaGFBUEk7XG4gICAgY29uc3RydWN0b3IocmVjYXB0Y2hhQ29uZmlnOiBSZWNhcHRjaGFNb2R1bGVDb25maWcsIGNvbnRyb2xEaXI6IE5nQ29udHJvbCwgc2NyaXB0TG9hZGVyU2VydmljZTogU2NyaXB0TG9hZGVyU2VydmljZSwgem9uZTogTmdab25lLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUaGVyZSBpcyBjdXJyZW50bHkgbm8gd2F5IHRvIHByb2dyYW1tYXRpY2FsbHkgc2V0IHRoZSB2YWx1ZSBvZlxuICAgICAqIGEgdmlzaWJsZSByZUNBUFRDSEEsIHNvIHRoaXMgaXMgYSBub29wXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWw6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVxdWlyZWQgbWV0aG9kIG9mIHRoZSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2UsIHdlIHJlZ2lzdGVyIHRoZSBjYWxsYmFja1xuICAgICAqIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlc1xuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWw6IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVxdWlyZWQgbWV0aG9kIG9mIHRoZSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2UsIHdlIHJlZ2lzdGVyIHRoZSBjYWxsYmFja1xuICAgICAqIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgY29udHJvbCBpcyBcInRvdWNoZWRcIlxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVbmZvcnR1bmF0ZWx5IHdlIGhhdmUgdG8gcmVnaXN0ZXIgYSBnbG9iYWwgaGFuZGxlciBmb3IgdGhlIG9ubG9hZFxuICAgICAqIGV2ZW50IGZyb20gdGhlIHJlY2FwdGNoYSBsaWJcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEdsb2JhbEhhbmRsZXJzKCk7XG4gICAgcHJpdmF0ZSB1bnNldEdsb2JhbEhhbmRsZXJzKCk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudCBhbmQgaW5qZWN0IGl0IGludG8gdGhlIHBhZ2UgaW4gb3JkZXJcbiAgICAgKiB0byBsb2FkIHRoZSByZWNhcHRjaGEgbGliLiBFbWl0IGxvYWQgb3IgZXJyb3IgZXZlbnRzIGZyb20gdGhlIHJlbGV2YW50XG4gICAgICogT3V0cHV0cyB0byB0aGUgY29tcG9uZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBpbmplY3RHb29nbGVSZWNhcHRjaGFTY3JpcHQoKTtcbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIHJlY2FwdGNoYSBsaWIgdG8gbWFudWFsbHkgcmVuZGVyIGEgcmVjYXB0Y2hhIHdpZGdldCB3aXRoIHRoZSBWaWV3Q2hpbGRcbiAgICAgKiBjb250YWluZXIgZWxlbWVudCwgcGFzc2luZyB0aGUgcmVsZXZhbnQgY2FsbGJhY2tzIGFuZCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlclJlY2FwdGNoYSgpO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgd2hpY2ggd2lsbCBiZSByZWdpc3RlcmVkIHdpdGggdGhlIHJlY2FwdGNoYSBsaWIgdG8gYmUgY2FsbGVkXG4gICAgICogd2hlbmV2ZXIgaXQgaGFzIGEgdmFsaWQgc3RhdHVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBvblJlY2FwdGNoYVZhbGlkQ2FsbGJhY2soKTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIHdoaWNoIHdpbGwgYmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSByZWNhcHRjaGEgbGliIHRvIGJlIGNhbGxlZFxuICAgICAqIHdoZW5ldmVyIGl0cyB2YWxpZCBzdGF0dXMgZXhwaXJlc1xuICAgICAqL1xuICAgIHByaXZhdGUgb25SZWNhcHRjaGFFeHBpcmVkQ2FsbGJhY2soKTtcbn1cbiJdfQ==