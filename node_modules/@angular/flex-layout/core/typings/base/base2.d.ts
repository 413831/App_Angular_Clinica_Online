/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { StyleDefinition, StyleUtils } from '../style-utils/style-utils';
import { StyleBuilder } from '../style-builder/style-builder';
import { MediaMarshaller } from '../media-marshaller/media-marshaller';
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseDirective2 implements OnChanges, OnDestroy {
    protected elementRef: ElementRef;
    protected styleBuilder: StyleBuilder;
    protected styler: StyleUtils;
    protected marshal: MediaMarshaller;
    protected DIRECTIVE_KEY: string;
    protected inputs: string[];
    /** The most recently used styles for the builder */
    protected mru: StyleDefinition;
    protected destroySubject: Subject<void>;
    protected currentValue: any;
    /** Access to host element's parent DOM node */
    protected get parentElement(): HTMLElement | null;
    /** Access to the HTMLElement for the directive */
    protected get nativeElement(): HTMLElement;
    /** Access to the activated value for the directive */
    get activatedValue(): string;
    set activatedValue(value: string);
    /** Cache map for style computation */
    protected styleCache: Map<string, StyleDefinition>;
    protected constructor(elementRef: ElementRef, styleBuilder: StyleBuilder, styler: StyleUtils, marshal: MediaMarshaller);
    /** For @Input changes */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /** Register with central marshaller service */
    protected init(extraTriggers?: Observable<any>[]): void;
    /** Add styles to the element using predefined style builder */
    protected addStyles(input: string, parent?: Object): void;
    /** Remove generated styles from an element using predefined style builder */
    protected clearStyles(): void;
    /** Force trigger style updates on DOM element */
    protected triggerUpdate(): void;
    /**
     * Determine the DOM element's Flexbox flow (flex-direction).
     *
     * Check inline style first then check computed (stylesheet) style.
     * And optionally add the flow value to element's inline style.
     */
    protected getFlexFlowDirection(target: HTMLElement, addIfMissing?: boolean): string;
    protected hasWrap(target: HTMLElement): boolean;
    /** Applies styles given via string pair or object map to the directive element */
    protected applyStyleToElement(style: StyleDefinition, value?: string | number, element?: HTMLElement): void;
    protected setValue(val: any, bp: string): void;
    protected updateWithValue(input: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseDirective2, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseDirective2, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZTIuZC50cyIsInNvdXJjZXMiOlsiYmFzZTIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTdHlsZURlZmluaXRpb24sIFN0eWxlVXRpbHMgfSBmcm9tICcuLi9zdHlsZS11dGlscy9zdHlsZS11dGlscyc7XG5pbXBvcnQgeyBTdHlsZUJ1aWxkZXIgfSBmcm9tICcuLi9zdHlsZS1idWlsZGVyL3N0eWxlLWJ1aWxkZXInO1xuaW1wb3J0IHsgTWVkaWFNYXJzaGFsbGVyIH0gZnJvbSAnLi4vbWVkaWEtbWFyc2hhbGxlci9tZWRpYS1tYXJzaGFsbGVyJztcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIEJhc2VEaXJlY3RpdmUyIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBzdHlsZUJ1aWxkZXI6IFN0eWxlQnVpbGRlcjtcbiAgICBwcm90ZWN0ZWQgc3R5bGVyOiBTdHlsZVV0aWxzO1xuICAgIHByb3RlY3RlZCBtYXJzaGFsOiBNZWRpYU1hcnNoYWxsZXI7XG4gICAgcHJvdGVjdGVkIERJUkVDVElWRV9LRVk6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgaW5wdXRzOiBzdHJpbmdbXTtcbiAgICAvKiogVGhlIG1vc3QgcmVjZW50bHkgdXNlZCBzdHlsZXMgZm9yIHRoZSBidWlsZGVyICovXG4gICAgcHJvdGVjdGVkIG1ydTogU3R5bGVEZWZpbml0aW9uO1xuICAgIHByb3RlY3RlZCBkZXN0cm95U3ViamVjdDogU3ViamVjdDx2b2lkPjtcbiAgICBwcm90ZWN0ZWQgY3VycmVudFZhbHVlOiBhbnk7XG4gICAgLyoqIEFjY2VzcyB0byBob3N0IGVsZW1lbnQncyBwYXJlbnQgRE9NIG5vZGUgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IHBhcmVudEVsZW1lbnQoKTogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIC8qKiBBY2Nlc3MgdG8gdGhlIEhUTUxFbGVtZW50IGZvciB0aGUgZGlyZWN0aXZlICovXG4gICAgcHJvdGVjdGVkIGdldCBuYXRpdmVFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIC8qKiBBY2Nlc3MgdG8gdGhlIGFjdGl2YXRlZCB2YWx1ZSBmb3IgdGhlIGRpcmVjdGl2ZSAqL1xuICAgIGdldCBhY3RpdmF0ZWRWYWx1ZSgpOiBzdHJpbmc7XG4gICAgc2V0IGFjdGl2YXRlZFZhbHVlKHZhbHVlOiBzdHJpbmcpO1xuICAgIC8qKiBDYWNoZSBtYXAgZm9yIHN0eWxlIGNvbXB1dGF0aW9uICovXG4gICAgcHJvdGVjdGVkIHN0eWxlQ2FjaGU6IE1hcDxzdHJpbmcsIFN0eWxlRGVmaW5pdGlvbj47XG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHN0eWxlQnVpbGRlcjogU3R5bGVCdWlsZGVyLCBzdHlsZXI6IFN0eWxlVXRpbHMsIG1hcnNoYWw6IE1lZGlhTWFyc2hhbGxlcik7XG4gICAgLyoqIEZvciBASW5wdXQgY2hhbmdlcyAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIFJlZ2lzdGVyIHdpdGggY2VudHJhbCBtYXJzaGFsbGVyIHNlcnZpY2UgKi9cbiAgICBwcm90ZWN0ZWQgaW5pdChleHRyYVRyaWdnZXJzPzogT2JzZXJ2YWJsZTxhbnk+W10pOiB2b2lkO1xuICAgIC8qKiBBZGQgc3R5bGVzIHRvIHRoZSBlbGVtZW50IHVzaW5nIHByZWRlZmluZWQgc3R5bGUgYnVpbGRlciAqL1xuICAgIHByb3RlY3RlZCBhZGRTdHlsZXMoaW5wdXQ6IHN0cmluZywgcGFyZW50PzogT2JqZWN0KTogdm9pZDtcbiAgICAvKiogUmVtb3ZlIGdlbmVyYXRlZCBzdHlsZXMgZnJvbSBhbiBlbGVtZW50IHVzaW5nIHByZWRlZmluZWQgc3R5bGUgYnVpbGRlciAqL1xuICAgIHByb3RlY3RlZCBjbGVhclN0eWxlcygpOiB2b2lkO1xuICAgIC8qKiBGb3JjZSB0cmlnZ2VyIHN0eWxlIHVwZGF0ZXMgb24gRE9NIGVsZW1lbnQgKi9cbiAgICBwcm90ZWN0ZWQgdHJpZ2dlclVwZGF0ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZSB0aGUgRE9NIGVsZW1lbnQncyBGbGV4Ym94IGZsb3cgKGZsZXgtZGlyZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIENoZWNrIGlubGluZSBzdHlsZSBmaXJzdCB0aGVuIGNoZWNrIGNvbXB1dGVkIChzdHlsZXNoZWV0KSBzdHlsZS5cbiAgICAgKiBBbmQgb3B0aW9uYWxseSBhZGQgdGhlIGZsb3cgdmFsdWUgdG8gZWxlbWVudCdzIGlubGluZSBzdHlsZS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0RmxleEZsb3dEaXJlY3Rpb24odGFyZ2V0OiBIVE1MRWxlbWVudCwgYWRkSWZNaXNzaW5nPzogYm9vbGVhbik6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgaGFzV3JhcCh0YXJnZXQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbjtcbiAgICAvKiogQXBwbGllcyBzdHlsZXMgZ2l2ZW4gdmlhIHN0cmluZyBwYWlyIG9yIG9iamVjdCBtYXAgdG8gdGhlIGRpcmVjdGl2ZSBlbGVtZW50ICovXG4gICAgcHJvdGVjdGVkIGFwcGx5U3R5bGVUb0VsZW1lbnQoc3R5bGU6IFN0eWxlRGVmaW5pdGlvbiwgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXIsIGVsZW1lbnQ/OiBIVE1MRWxlbWVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNldFZhbHVlKHZhbDogYW55LCBicDogc3RyaW5nKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlV2l0aFZhbHVlKGlucHV0OiBzdHJpbmcpOiB2b2lkO1xufVxuIl19