{"version":3,"file":"angular-fire-database.js","sources":["ng://@angular/fire/database/utils.ts","ng://@angular/fire/database/observable/fromRef.ts","ng://@angular/fire/database/list/changes.ts","ng://@angular/fire/database/list/utils.ts","ng://@angular/fire/database/list/snapshot-changes.ts","ng://@angular/fire/database/list/state-changes.ts","ng://@angular/fire/database/list/audit-trail.ts","ng://@angular/fire/database/list/data-operation.ts","ng://@angular/fire/database/list/remove.ts","ng://@angular/fire/database/list/create-reference.ts","ng://@angular/fire/database/object/snapshot-changes.ts","ng://@angular/fire/database/object/create-reference.ts","ng://@angular/fire/database/database.ts","ng://@angular/fire/database/database.module.ts"],"sourcesContent":["import { Subscription, Scheduler } from 'rxjs';\nimport { PathReference, DatabaseReference, FirebaseOperation, FirebaseOperationCases } from './interfaces';\nimport { database } from 'firebase/app';\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isFirebaseDataSnapshot(value: any): boolean {\n  return typeof value.exportVal === 'function';\n}\n\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isFirebaseRef(value: any): boolean {\n  return typeof value.set === 'function';\n}\n\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param app - Firebase App\n * @param path - Database path, relative or absolute\n */\nexport function getRef(database: database.Database, pathRef: PathReference): DatabaseReference {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef as DatabaseReference\n    : database.ref(pathRef as string);\n}\n\nexport function checkOperationCases(item: FirebaseOperation, cases: FirebaseOperationCases) : Promise<void> {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase!();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase!();\n  }\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\n","import { DatabaseQuery, DatabaseSnapshot, ListenEvent, AngularFireAction } from '../interfaces';\nimport { Observable, SchedulerLike, queueScheduler, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\ninterface SnapshotPrevKey<T> {\n  snapshot: DatabaseSnapshot<T>;\n  prevKey: string | null | undefined;\n}\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef<T>(ref: DatabaseQuery, event: ListenEvent, listenType = 'on', scheduler: SchedulerLike = asyncScheduler): Observable<AngularFireAction<DatabaseSnapshot<T>>> {\n  return new Observable<SnapshotPrevKey<T>>(subscriber => {\n    let fn: any | null = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({ snapshot, prevKey });\n      });\n      if (listenType == 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err))\n    });\n\n    if (listenType == 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return { unsubscribe() { } };\n    }\n  }).pipe(\n    map(payload => {\n      const { snapshot, prevKey } = payload;\n      let key: string | null = null;\n      if (snapshot.exists()) { key = snapshot.key; }\n      return { type: event, payload: snapshot, prevKey, key };\n    }),\n    share()\n  );\n}\n","import { fromRef } from '../observable/fromRef';\nimport { Observable, of, merge, SchedulerLike } from 'rxjs';\n\nimport { DatabaseQuery, ChildEvent, SnapshotAction } from '../interfaces';\nimport { isNil } from '../utils';\n\nimport { switchMap, distinctUntilChanged, scan } from 'rxjs/operators';\n\nexport function listChanges<T=any>(ref: DatabaseQuery, events: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(\n    switchMap(snapshotAction => {\n      const childEvent$ = [of(snapshotAction)];\n      events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n      return merge(...childEvent$).pipe(scan(buildView, []))\n    }),\n    distinctUntilChanged()\n  );\n}\n\nfunction positionFor<T>(changes: SnapshotAction<T>[], key) {\n  const len = changes.length;\n  for(let i=0; i<len; i++) {\n    if(changes[i].payload.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction positionAfter<T>(changes: SnapshotAction<T>[], prevKey?: string) {\n  if(isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if( i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, action) {\n  const { payload, type, prevKey, key } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = {payload, type: 'value', prevKey, key: payload.key};\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if ((previous && previous.key || null) != prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice()\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n      return current;\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n    case 'child_moved':\n      if(currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice()\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\n","import { isNil } from '../utils';\n\nexport function validateEventsArray(events?: any[]) {\n  if(isNil(events) || events!.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n  return events;\n}","import { Observable, SchedulerLike } from 'rxjs';\nimport { listChanges } from './changes';\nimport { DatabaseQuery, ChildEvent, SnapshotAction } from '../interfaces';\nimport { validateEventsArray } from './utils';\n\nexport function snapshotChanges<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  events = validateEventsArray(events);\n  return listChanges<T>(query, events!, scheduler);\n}\n","import { DatabaseQuery, ChildEvent, AngularFireAction, SnapshotAction } from '../interfaces';\nimport { fromRef } from '../observable/fromRef';\nimport { validateEventsArray } from './utils';\nimport { SchedulerLike, Observable, merge } from 'rxjs';\nimport { DatabaseSnapshot } from '../interfaces';\n\nexport function stateChanges<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike) {\n  events = validateEventsArray(events)!;\n  const childEvent$ = events.map(event => fromRef<T>(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\n","import { DataSnapshot, DatabaseQuery, ChildEvent, DatabaseSnapshot, AngularFireAction, SnapshotAction } from '../interfaces';\nimport { stateChanges } from './state-changes';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { fromRef } from '../observable/fromRef';\n\nimport { skipWhile, withLatestFrom, map, scan } from 'rxjs/operators';\n\nexport function auditTrail<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  const auditTrail$ = stateChanges<T>(query, events)\n    .pipe(\n      scan((current, action) => [...current, action], [])\n    );\n  return waitForLoaded<T>(query, auditTrail$, scheduler);\n}\n\ninterface LoadedMetadata {\n  data: AngularFireAction<DataSnapshot>;\n  lastKeyToLoad: any;\n}\n\nfunction loadedData<T>(query: DatabaseQuery, scheduler?: SchedulerLike): Observable<LoadedMetadata> {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef<T>(query, 'value', 'on', scheduler)\n  .pipe(\n    map(data => {\n      // Store the last key in the data set\n      let lastKeyToLoad;\n      // Loop through loaded dataset to find the last key\n      data.payload.forEach(child => {\n        lastKeyToLoad = child.key; return false;\n      });\n      // return data set and the current last key loaded\n      return { data, lastKeyToLoad };\n    })\n  );\n}\n\nfunction waitForLoaded<T>(query: DatabaseQuery, action$: Observable<SnapshotAction<T>[]>, scheduler?: SchedulerLike) {\n  const loaded$ = loadedData<T>(query, scheduler);\n  return loaded$\n    .pipe(\n      withLatestFrom(action$),\n      // Get the latest values from the \"loaded\" and \"child\" datasets\n      // We can use both datasets to form an array of the latest values.\n      map(([loaded, actions]) => {\n        // Store the last key in the data set\n        let lastKeyToLoad = loaded.lastKeyToLoad;\n        // Store all child keys loaded at this point\n        const loadedKeys = actions.map(snap => snap.key);\n        return { actions, lastKeyToLoad, loadedKeys }\n      }),\n      // This is the magical part, only emit when the last load key\n      // in the dataset has been loaded by a child event. At this point\n      // we can assume the dataset is \"whole\".\n      skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1),\n      // Pluck off the meta data because the user only cares\n      // to iterate through the snapshots\n      map(meta => meta.actions)\n    );\n}\n","\nimport { DatabaseReference, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\nimport { checkOperationCases } from '../utils';\n\nexport function createDataOperationMethod<T>(ref: DatabaseReference, operation: string) {\n  return function dataOperation<T>(item: FirebaseOperation, value: T) {\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(<string>item)[operation](value),\n      firebaseCase: () => (<DatabaseReference>item)[operation](value),\n      snapshotCase: () => (<DatabaseSnapshot<T>>item).ref[operation](value)\n    });\n  }\n}\n","import { DatabaseReference, DataSnapshot, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\nimport { checkOperationCases } from '../utils';\nimport { database } from 'firebase/app';\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nexport function createRemoveMethod<T>(ref: DatabaseReference) {\n  return function remove(item?: FirebaseOperation): any {\n    if(!item) { return ref.remove(); }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(<string>item).remove(),\n      firebaseCase: () => (<DatabaseReference>item).remove(),\n      snapshotCase: () => (<DatabaseSnapshot<T>>item).ref.remove()\n    });\n  }\n}\n","import { DatabaseQuery, AngularFireList, ChildEvent } from '../interfaces';\nimport { snapshotChanges } from './snapshot-changes';\nimport { stateChanges } from './state-changes';\nimport { auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { AngularFireDatabase } from '../database';\nimport { map } from 'rxjs/operators';\n\nexport function createListReference<T=any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireList<T> {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  return {\n    query,\n    update: createDataOperationMethod<Partial<T>>(query.ref, 'update'),\n    set: createDataOperationMethod<T>(query.ref, 'set'),\n    push: (data: T) => query.ref.push(data),\n    remove: createRemoveMethod(query.ref),\n    snapshotChanges(events?: ChildEvent[]) {\n      return snapshotChanges<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    stateChanges(events?: ChildEvent[]) {\n      return stateChanges<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    auditTrail(events?: ChildEvent[]) {\n      return auditTrail<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    valueChanges(events?: ChildEvent[]) {\n      const snapshotChanges$ = snapshotChanges<T>(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(\n        map(actions => actions.map(a => a.payload.val() as T)),\n        afDatabase.keepUnstableUntilFirst\n      );\n    }\n  }\n}\n","import { Observable, SchedulerLike } from 'rxjs';\nimport { fromRef } from '../observable/fromRef';\nimport { DatabaseQuery, SnapshotAction } from '../interfaces';\n\nexport function createObjectSnapshotChanges<T>(query: DatabaseQuery, scheduler?: SchedulerLike) {\n  return function snapshotChanges(): Observable<SnapshotAction<T>> {\n    return fromRef(query, 'value', 'on', scheduler);\n  }\n}\n","import { map } from 'rxjs/operators';\nimport { DatabaseQuery, AngularFireObject } from '../interfaces';\nimport { createObjectSnapshotChanges } from './snapshot-changes';\nimport { AngularFireDatabase } from '../database';\n\nexport function createObjectReference<T=any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireObject<T> {\n  return {\n    query,\n    snapshotChanges<T>() {\n      return createObjectSnapshotChanges<T>(query, afDatabase.schedulers.outsideAngular)().pipe(\n        afDatabase.keepUnstableUntilFirst!\n      );\n    },\n    update(data: Partial<T>) { return query.ref.update(data as any) as Promise<void>; },\n    set(data: T) { return query.ref.set(data) as Promise<void>; },\n    remove() { return query.ref.remove() as Promise<void>; },\n    valueChanges<T>() {\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(\n        afDatabase.keepUnstableUntilFirst,\n        map(action => action.payload.exists() ? action.payload.val() as T : null)\n      )\n    },\n  }\n}\n","import { Injectable, Inject, Optional, NgZone, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DatabaseQuery, PathReference, QueryFn, AngularFireList, AngularFireObject } from './interfaces';\nimport { getRef } from './utils';\nimport { createListReference } from './list/create-reference';\nimport { createObjectReference } from './object/create-reference';\nimport { FirebaseOptions, FirebaseAppConfig, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵfirebaseAppFactory, ɵkeepUnstableUntilFirstFactory, ɵAngularFireSchedulers } from '@angular/fire';\nimport { Observable } from 'rxjs';\nimport { database } from 'firebase/app';\nimport 'firebase/database';\n\nexport const URL = new InjectionToken<string>('angularfire2.realtimeDatabaseURL')\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireDatabase {\n  public readonly database: database.Database;\n\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(URL) databaseURL:string|null,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n\n    this.database = zone.runOutsideAngular(() => {\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      return app.database(databaseURL || undefined);\n    });\n  }\n\n  list<T>(pathOrRef: PathReference, queryFn?: QueryFn): AngularFireList<T> {\n    const ref = getRef(this.database, pathOrRef);\n    let query: DatabaseQuery = ref;\n    if(queryFn) {\n      query = queryFn(ref);\n    }\n    return createListReference<T>(query, this);\n  }\n\n  object<T>(pathOrRef: PathReference): AngularFireObject<T>  {\n    const ref = getRef(this.database, pathOrRef);\n    return createObjectReference<T>(ref, this);\n  }\n\n  createPushId() {\n    return this.database.ref().push().key;\n  }\n\n}\n\nexport {\n  PathReference,\n  DatabaseSnapshot,\n  ChildEvent,\n  ListenEvent,\n  QueryFn,\n  AngularFireList,\n  AngularFireObject,\n  AngularFireAction,\n  Action,\n  SnapshotAction\n} from './interfaces';\n","import { NgModule } from '@angular/core';\nimport { AngularFireDatabase } from './database';\n\n@NgModule({\n  providers: [ AngularFireDatabase ]\n})\nexport class AngularFireDatabaseModule { }\n"],"names":[],"mappings":"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"}