{"version":3,"file":"angular-fire-messaging.js","sources":["ng://@angular/fire/messaging/messaging.ts","ng://@angular/fire/messaging/messaging.module.ts"],"sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { messaging } from 'firebase/app';\nimport { Observable, empty, of, throwError } from 'rxjs';\nimport { mergeMap, catchError, map, switchMap, concat, observeOn, defaultIfEmpty } from 'rxjs/operators';\nimport { FirebaseOptions, FirebaseAppConfig, ɵAngularFireSchedulers, FIREBASE_APP_NAME, FIREBASE_OPTIONS, ɵlazySDKProxy, ɵPromiseProxy } from '@angular/fire';\nimport { ɵfirebaseAppFactory } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\n\nexport interface AngularFireMessaging extends Omit<ɵPromiseProxy<messaging.Messaging>, 'deleteToken'|'getToken'|'requestPermission'> {};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireMessaging {\n\n  public readonly requestPermission: Observable<void>;\n  public readonly getToken: Observable<string|null>;\n  public readonly tokenChanges: Observable<string|null>;\n  public readonly messages: Observable<{}>;\n  public readonly requestToken: Observable<string|null>;\n  public readonly deleteToken: (token: string) => Observable<boolean>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n\n    const messaging = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => isPlatformServer(platformId) ? empty() : import('firebase/messaging')),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => app.messaging())\n    );\n\n    if (!isPlatformServer(platformId)) {\n\n      this.requestPermission = messaging.pipe(\n        observeOn(schedulers.outsideAngular),\n        switchMap(messaging => messaging.requestPermission()),\n      );\n    \n    } else {\n    \n      this.requestPermission = throwError('Not available on server platform.');\n    \n    }\n\n    this.getToken = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.getToken()),\n      defaultIfEmpty(null)\n    )\n\n    const tokenChanges = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(\n        switchMap(() => messaging.getToken())\n      ))\n    );\n\n    this.tokenChanges = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.getToken()),\n      concat(tokenChanges)\n    );\n\n    this.messages = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onMessage.bind(messaging)))\n    );\n\n    this.requestToken = of(undefined).pipe(\n      switchMap(() => this.requestPermission),\n      catchError(() => of(null)),\n      mergeMap(() => this.tokenChanges)\n    );\n\n    this.deleteToken = (token: string) => messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.deleteToken(token)),\n      defaultIfEmpty(false)\n    );\n\n    return ɵlazySDKProxy(this, messaging, zone);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireMessaging } from './messaging';\n\n@NgModule({\n  providers: [ AngularFireMessaging ]\n})\nexport class AngularFireMessagingModule { }\n"],"names":[],"mappings":"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"}