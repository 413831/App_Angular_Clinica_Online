{"version":3,"sources":["ng://@angular/fire/storage/observable/fromTask.ts","ng://@angular/fire/storage/task.ts","ng://@angular/fire/storage/ref.ts","ng://@angular/fire/storage/storage.ts","ng://@angular/fire/storage/storage.module.ts"],"names":["fromTask","task","Observable","subscriber","on","snap","next","e","error","complete","cancel","createUploadTask","inner$","then","bind","catch","pause","resume","snapshotChanges","percentageChanges","pipe","map","s","bytesTransferred","totalBytes","createStorageRef","ref","schedulers","keepUnstableUntilFirst","getDownloadURL","of","undefined","observeOn","outsideAngular","switchMap","getMetadata","delete","from","child","path","updateMetadata","meta","put","data","metadata","putString","format","listAll","BUCKET","InjectionToken","AngularFireStorage","options","nameOrConfig","storageBucket","platformId","zone","this","ɵAngularFireSchedulers","ɵkeepUnstableUntilFirstFactory","storage","runOutsideAngular","ɵfirebaseAppFactory","prototype","upload","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","Object","decorators","PLATFORM_ID","NgZone","AngularFireStorageModule","NgModule","providers"],"mappings":"2iBAIgBA,EAASC,GACvB,OAAO,IAAIC,EAAAA,YAAU,SAAqBC,GAKxC,OADAF,EAAKG,GAAG,iBAHM,SAAIC,GAA6B,OAAAF,EAAWG,KAAKD,MACpD,SAAGE,GAAK,OAAAJ,EAAWK,MAAMD,MACtB,WAAS,OAAAJ,EAAWM,cAElC,WAAa,OAAAR,EAAKS,aCetB,SAAgBC,EAAiBV,OACzBW,EAASZ,EAASC,GACxB,MAAO,CACLA,KAAMA,EACNY,KAAMZ,EAAKY,KAAKC,KAAKb,GACrBc,MAAOd,EAAKc,MAAMD,KAAKb,GACvBe,MAAOf,EAAKe,MAAMF,KAAKb,GACvBS,OAAQT,EAAKS,OAAOI,KAAKb,GACzBgB,OAAQhB,EAAKgB,OAAOH,KAAKb,GACzBiB,gBAAe,WAAQ,OAAAN,GACvBO,kBAAiB,WAAQ,OAAAP,EAAOQ,KAC9BC,EAAAA,KAAG,SAACC,GAAK,OAAAA,EAAEC,iBAAmBD,EAAEE,WAAa,UCdnD,SAAgBC,EACdC,EACAC,EACAC,GAEA,MAAO,CACLC,eAAc,WAAQ,OAAAC,EAAAA,QAAGC,GAAWX,KAClCY,EAAAA,UAAUL,EAAWM,gBACrBC,EAAAA,WAAS,WAAO,OAAAR,EAAIG,oBACpBD,IAEFO,YAAW,WAAQ,OAAAL,EAAAA,KAAKV,KACtBY,EAAAA,UAAUL,EAAWM,gBACrBC,EAAAA,WAAS,WAAO,OAAAR,EAAIS,iBACpBP,IAEFQ,OAAM,WAAQ,OAAAC,EAAAA,KAAKX,EAAIU,WACvBE,MAAK,SAAGC,GAAiB,OAAAd,EAAiBC,EAAIY,MAAMC,GAAOZ,EAAYC,IACvEY,eAAc,SAAGC,GAA2B,OAAAJ,EAAAA,KAAKX,EAAIc,eAAeC,KACpEC,IAAG,SAAGC,EAAWC,GAEf,OAAOjC,EADMe,EAAIgB,IAAIC,EAAMC,KAG7BC,UAAS,SAAGF,EAAcG,EAAuBF,GAE/C,OAAOjC,EADMe,EAAImB,UAAUF,EAAMG,EAAQF,KAG3CG,QAAO,WAAQ,OAAAV,EAAAA,KAAKX,EAAIqB,iBCzCfC,EAAS,IAAIC,EAAAA,eAAuB,2CAkB/C,SAAAC,EAC4BC,EACaC,EACXC,EACPC,EACrBC,GAEAC,KAAK7B,WAAa,IAAI8B,EAAAA,0BAAuBF,GAC7CC,KAAK5B,uBAAyB8B,EAAAA,kCAA+BF,KAAK7B,WAAY2B,GAE9EE,KAAKG,QAAUJ,EAAKK,mBAAiB,WAEnC,OADYC,EAAAA,uBAAoBV,EAASI,EAAMH,GACpCO,QAAQN,QAAiBtB,aAIxCmB,EAAAY,UAAApC,IAAA,SAAIa,GACF,OAAOd,EAAiB+B,KAAKG,QAAQjC,IAAIa,GAAOiB,KAAK7B,WAAY6B,KAAK5B,yBAGxEsB,EAAAY,UAAAC,OAAA,SAAOxB,EAAcI,EAAWC,GAG9B,OADYnB,EADO+B,KAAKG,QAAQjC,IAAIa,GACKiB,KAAK7B,WAAY6B,KAAK5B,wBACpDc,IAAIC,EAAMC,wBAhCxBoB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4EASTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,oDACPC,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACM,EAAAA,qDACnBF,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACjB,YACawB,OAAMC,WAAA,CAAA,CAAAH,KAAtCH,EAAAA,OAAMF,KAAA,CAACS,EAAAA,sBA9B2CC,EAAAA,6QCGvD,SAAAC,KAGwC,2BAHvCC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,UAAW,CAAE5B,OAEyB0B","sourcesContent":["import { Observable } from 'rxjs';\nimport { UploadTask, UploadTaskSnapshot } from '../interfaces';\nimport { storage } from 'firebase/app';\n\nexport function fromTask(task: UploadTask) {\n  return new Observable<UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: UploadTaskSnapshot) => subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    task.on('state_changed', progress, error, complete);\n    return () => task.cancel();\n  });\n}\n","import { UploadTaskSnapshot, UploadTask } from './interfaces';\nimport { fromTask } from './observable/fromTask';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface AngularFireUploadTask {\n  task: UploadTask,\n  snapshotChanges(): Observable<UploadTaskSnapshot | undefined>;\n  percentageChanges(): Observable<number | undefined>;\n  pause(): boolean;\n  cancel(): boolean;\n  resume(): boolean;\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshot) => any) | null, \n    onRejected?: ((a: Error) => any) | null\n  ): Promise<any>;\n  catch(onRejected: (a: Error) => any): Promise<any>;\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n * @param task \n */\nexport function createUploadTask(task: UploadTask): AngularFireUploadTask {\n  const inner$ = fromTask(task);\n  return {\n    task: task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges: () => inner$,\n    percentageChanges: () => inner$.pipe(\n      map(s => s.bytesTransferred / s.totalBytes * 100)\n    )\n  };\n}\n","import { SettableMetadata, UploadMetadata, Reference, StringFormat, ListResult} from './interfaces';\nimport { createUploadTask, AngularFireUploadTask } from './task';\nimport { Observable, from, of } from 'rxjs';\nimport { ɵAngularFireSchedulers } from '@angular/fire';\nimport { observeOn, switchMap } from 'rxjs/operators';\n\nexport interface AngularFireStorageReference {\n  getDownloadURL(): Observable<any>;\n  getMetadata(): Observable<any>;\n  delete(): Observable<any>;\n  child(path: string): any;\n  updateMetadata(meta: SettableMetadata): Observable<any>;\n  put(data: any, metadata?: UploadMetadata | undefined): AngularFireUploadTask;\n  putString(data: string, format?: string | undefined, metadata?: UploadMetadata | undefined): AngularFireUploadTask;\n  listAll(): Observable<ListResult>;\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n * @param ref\n */\nexport function createStorageRef(\n  ref: Reference,\n  schedulers: ɵAngularFireSchedulers,\n  keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>\n): AngularFireStorageReference {\n  return {\n    getDownloadURL: () => of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => ref.getDownloadURL()),\n      keepUnstableUntilFirst\n    ),\n    getMetadata: () => of().pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => ref.getMetadata()),\n      keepUnstableUntilFirst\n    ),\n    delete: () => from(ref.delete()),\n    child: (path: string) => createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst),\n    updateMetadata: (meta: SettableMetadata) => from(ref.updateMetadata(meta)),\n    put: (data: any, metadata?: UploadMetadata) => {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString: (data: string, format?: StringFormat, metadata?: UploadMetadata) => {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    listAll: () => from(ref.listAll())\n  };\n}\n","import { Injectable, Inject, Optional, InjectionToken, NgZone, PLATFORM_ID } from '@angular/core';\nimport { createStorageRef } from './ref';\nimport { Observable } from 'rxjs';\nimport { FirebaseOptions, FirebaseAppConfig, ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵkeepUnstableUntilFirstFactory, ɵAngularFireSchedulers } from '@angular/fire';\nimport { UploadMetadata } from './interfaces';\nimport { storage } from 'firebase/app';\nimport 'firebase/storage';\n\nexport const BUCKET = new InjectionToken<string>('angularfire2.storageBucket');\n\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireStorage {\n  public readonly storage: storage.Storage;\n\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(BUCKET) storageBucket:string|null,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n\n    this.storage = zone.runOutsideAngular(() => {\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      return app.storage(storageBucket || undefined);\n    });\n  }\n\n  ref(path: string) {\n    return createStorageRef(this.storage.ref(path), this.schedulers, this.keepUnstableUntilFirst);\n  }\n\n  upload(path: string, data: any, metadata?: UploadMetadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef, this.schedulers, this.keepUnstableUntilFirst);\n    return ref.put(data, metadata);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireStorage } from './storage';\n\n@NgModule({\n  providers: [ AngularFireStorage ]\n})\nexport class AngularFireStorageModule { }\n"]}