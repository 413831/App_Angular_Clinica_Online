{"version":3,"file":"angular-fire-performance.umd.js","sources":["ng://@angular/fire/performance/performance.ts","ng://@angular/fire/performance/performance.service.ts","ng://@angular/fire/performance/performance.module.ts"],"sourcesContent":["import { Injectable, NgZone, InjectionToken, Inject, Optional, PLATFORM_ID } from '@angular/core';\nimport { Observable, Subscription, of, empty } from 'rxjs';\nimport { tap, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { performance } from 'firebase/app';\nimport { FirebaseApp, ɵPromiseProxy, ɵlazySDKProxy } from '@angular/fire';\nimport { isPlatformBrowser } from '@angular/common';\n\n// SEMVER @ v6, drop and move core ng metrics to a service\nexport const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken<boolean>('angularfire2.performance.auto_trace');\nexport const INSTRUMENTATION_ENABLED = new InjectionToken<boolean>('angularfire2.performance.instrumentationEnabled');\nexport const DATA_COLLECTION_ENABLED = new InjectionToken<boolean>('angularfire2.performance.dataCollectionEnabled');\n\nexport interface AngularFirePerformance extends ɵPromiseProxy<performance.Performance> {};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFirePerformance {\n  \n  private readonly performance: Observable<performance.Performance>;\n\n  constructor(\n    app: FirebaseApp,\n    @Optional() @Inject(INSTRUMENTATION_ENABLED) instrumentationEnabled:boolean|null,\n    @Optional() @Inject(DATA_COLLECTION_ENABLED) dataCollectionEnabled:boolean|null,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) platformId:Object\n  ) {\n\n    this.performance = of(undefined).pipe(\n      switchMap(() => isPlatformBrowser(platformId) ? zone.runOutsideAngular(() => import('firebase/performance')) : empty()),\n      map(() => zone.runOutsideAngular(() => app.performance())),\n      tap(performance => {\n        if (instrumentationEnabled == false) { performance.instrumentationEnabled = false }\n        if (dataCollectionEnabled == false) { performance.dataCollectionEnabled = false }\n      }),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    return ɵlazySDKProxy(this, this.performance, zone);\n\n  }\n\n}\n\nconst trace$ = (traceId:string) => {\n  if (typeof window !== 'undefined' && window.performance) {\n    const entries = window.performance.getEntriesByName(traceId, 'measure') || [];\n    const startMarkName = `_${traceId}Start[${entries.length}]`;\n    const endMarkName = `_${traceId}End[${entries.length}]`;\n    return new Observable<void>(emitter => {\n      window.performance.mark(startMarkName);\n      emitter.next();\n      return { unsubscribe: () => {\n        window.performance.mark(endMarkName);\n        window.performance.measure(traceId, startMarkName, endMarkName);\n      }};\n    });\n  } else {\n    return empty();\n  }\n}\n\nexport const traceUntil = <T=any>(name:string, test: (a:T) => boolean, options?: { orComplete?: boolean }) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      a  => test(a) && traceSubscription.unsubscribe(),\n      () => {},\n      () => options && options.orComplete && traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n\nexport const traceWhile = <T=any>(name:string, test: (a:T) => boolean, options?: { orComplete?: boolean}) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  let traceSubscription: Subscription|undefined;\n  return source$.pipe(\n    tap(\n      a  => {\n        if (test(a)) {\n          traceSubscription = traceSubscription || trace$(name).subscribe();\n        } else {\n          traceSubscription && traceSubscription.unsubscribe();\n          traceSubscription = undefined;\n        }\n      },\n      () => {},\n      () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n\nexport const traceUntilComplete = <T=any>(name:string) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      () => {},\n      () => {},\n      () => traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n\nexport const traceUntilFirst = <T=any>(name:string) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      () => traceSubscription.unsubscribe(),\n      () => {},\n      () => {}\n    )\n  ).subscribe(subscriber);\n});\n\nexport const trace = <T=any>(name:string) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      () => traceSubscription.unsubscribe(),\n      () => {},\n      () => traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n","import { Injectable, OnDestroy, ApplicationRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { first, tap } from 'rxjs/operators';\n\nconst IS_STABLE_START_MARK = '_isStableStart';\nconst IS_STABLE_END_MARK = '_isStableEnd';\n\nfunction markStarts() {\n    if (typeof(window) !== \"undefined\" && window.performance) {\n        window.performance.mark(IS_STABLE_START_MARK);\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst started = markStarts();\n\n@Injectable({\n    providedIn: 'any'\n})\nexport class PerformanceMonitoringService implements OnDestroy {\n\n    private disposable: Subscription|undefined;\n\n    constructor(appRef: ApplicationRef) {\n        if (started) {\n            this.disposable = appRef.isStable.pipe(\n                first(it => it),\n                tap(() => {\n                    window.performance.mark(IS_STABLE_END_MARK);\n                    window.performance.measure('isStable', IS_STABLE_START_MARK, IS_STABLE_END_MARK);\n                })\n            ).subscribe();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.disposable) { this.disposable.unsubscribe(); }\n    }\n\n}","import { NgModule, Optional } from '@angular/core';\nimport { AngularFirePerformance } from './performance';\nimport { PerformanceMonitoringService } from './performance.service';\n\n@NgModule({\n  providers: [ AngularFirePerformance ]\n})\nexport class AngularFirePerformanceModule {\n  constructor(\n    perf: AngularFirePerformance,\n    @Optional() _: PerformanceMonitoringService\n  ) {\n    // call anything here to get perf loading\n    perf.dataCollectionEnabled\n  }\n}\n"],"names":["InjectionToken","of","switchMap","isPlatformBrowser","empty","map","tap","shareReplay","ɵlazySDKProxy","Injectable","FirebaseApp","Optional","Inject","NgZone","PLATFORM_ID","Observable","first","ApplicationRef","NgModule"],"mappings":"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"}