{"version":3,"sources":["ng://@angular/fire/auth/auth.ts","ng://@angular/fire/auth/auth.module.ts"],"names":["AngularFireAuth","options","nameOrConfig","platformId","zone","schedulers","ɵAngularFireSchedulers","keepUnstableUntilFirst","ɵkeepUnstableUntilFirstFactory","auth","of","undefined","pipe","observeOn","outsideAngular","switchMap","runOutsideAngular","import","map","ɵfirebaseAppFactory","app","shareReplay","bufferSize","refCount","this","authState","Observable","onAuthStateChanged","bind","user","onIdTokenChanged","idToken","from","getIdToken","idTokenResult","getIdTokenResult","ɵlazySDKProxy","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","Object","decorators","PLATFORM_ID","NgZone","AngularFireAuthModule","NgModule","providers"],"mappings":"8fAmCE,SAAAA,EAC4BC,EACaC,EAClBC,EACrBC,OAEMC,EAAa,IAAIC,EAAAA,0BAAuBF,GACxCG,EAAyBC,EAAAA,kCAA+BH,EAAYF,GAEpEM,EAAOC,EAAAA,QAAGC,GAAWC,KACzBC,EAAAA,UAAUR,EAAWS,gBACrBC,EAAAA,WAAS,WAAO,OAAAX,EAAKY,mBAAiB,WAAO,OAAAC,OAAO,uBACpDC,EAAAA,KAAG,WAAO,OAAAC,EAAAA,uBAAoBlB,EAASG,EAAMF,MAC7CgB,EAAAA,KAAG,SAACE,GAAO,OAAAA,EAAIX,UACfY,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,KAuBzC,OApBAC,KAAKC,UAAYhB,EAAKG,KACpBC,EAAAA,UAAUR,EAAWS,gBACrBC,EAAAA,WAAS,SAACN,GAAQ,OAAA,IAAIiB,EAAAA,WAAsBjB,EAAKkB,mBAAmBC,KAAKnB,OACzEF,GAGFiB,KAAKK,KAAOpB,EAAKG,KACfC,EAAAA,UAAUR,EAAWS,gBACrBC,EAAAA,WAAS,SAACN,GAAQ,OAAA,IAAIiB,EAAAA,WAAsBjB,EAAKqB,iBAAiBF,KAAKnB,OACvEF,GAGFiB,KAAKO,QAAUP,KAAKK,KAAKjB,KACvBG,EAAAA,WAAS,SAACc,GAAQ,OAAAA,EAAOG,EAAAA,KAAKH,EAAKI,cAAgBvB,EAAAA,GAAG,UAGxDc,KAAKU,cAAgBV,KAAKK,KAAKjB,KAC7BG,EAAAA,WAAS,SAACc,GAAQ,OAAAA,EAAOG,EAAAA,KAAKH,EAAKM,oBAAsBzB,EAAAA,GAAG,UAGvD0B,EAAAA,iBAAcZ,KAAMf,EAAML,8BAhEpCiC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4EA2BTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,oDACPC,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACM,EAAAA,4BACaC,OAAMC,WAAA,CAAA,CAAAH,KAAtCH,EAAAA,OAAMF,KAAA,CAACS,EAAAA,sBAtC2BC,EAAAA,0PCGvC,SAAAC,KAGqC,2BAHpCC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,UAAW,CAAEnD,OAEsBiD","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap, map, observeOn, shareReplay } from 'rxjs/operators';\nimport { FIREBASE_OPTIONS, FIREBASE_APP_NAME, FirebaseOptions, FirebaseAppConfig, ɵPromiseProxy, ɵlazySDKProxy, ɵfirebaseAppFactory, ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory } from '@angular/fire';\nimport { User, auth } from 'firebase/app';\n\nexport interface AngularFireAuth extends ɵPromiseProxy<auth.Auth> {};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuth {\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<auth.IdTokenResult|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers, platformId);\n\n    const auth = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => app.auth()),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    this.authState = auth.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(auth => new Observable<User|null>(auth.onAuthStateChanged.bind(auth))),\n      keepUnstableUntilFirst\n    );\n\n    this.user = auth.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(auth => new Observable<User|null>(auth.onIdTokenChanged.bind(auth))),\n      keepUnstableUntilFirst\n    );\n\n    this.idToken = this.user.pipe(\n      switchMap(user => user ? from(user.getIdToken()) : of(null))\n    );\n\n    this.idTokenResult = this.user.pipe(\n      switchMap(user => user ? from(user.getIdTokenResult()) : of(null))\n    );\n\n    return ɵlazySDKProxy(this, auth, zone);\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuth } from './auth';\n\n@NgModule({\n  providers: [ AngularFireAuth ]\n})\nexport class AngularFireAuthModule { }\n"]}