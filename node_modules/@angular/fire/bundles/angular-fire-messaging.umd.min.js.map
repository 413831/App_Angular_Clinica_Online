{"version":3,"sources":["ng://@angular/fire/messaging/messaging.ts","ng://@angular/fire/messaging/messaging.module.ts"],"names":["AngularFireMessaging","options","nameOrConfig","platformId","zone","_this","this","schedulers","ɵAngularFireSchedulers","messaging","of","undefined","pipe","observeOn","outsideAngular","switchMap","isPlatformServer","empty","import","map","ɵfirebaseAppFactory","app","requestPermission","throwError","getToken","defaultIfEmpty","tokenChanges","Observable","onTokenRefresh","bind","concat","messages","onMessage","requestToken","catchError","mergeMap","deleteToken","token","ɵlazySDKProxy","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","Object","decorators","PLATFORM_ID","NgZone","AngularFireMessagingModule","NgModule","providers"],"mappings":"mkBAsBE,SAAAA,EAC4BC,EACaC,EAClBC,EACrBC,GAJF,IAAAC,EAAAC,KAMQC,EAAa,IAAIC,EAAAA,0BAAuBJ,GAExCK,EAAYC,EAAAA,QAAGC,GAAWC,KAC9BC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,WAAO,OAAAC,EAAAA,iBAAiBb,GAAcc,EAAAA,QAAUC,OAAO,yBAChEC,EAAAA,KAAG,WAAO,OAAAC,EAAAA,uBAAoBnB,EAASG,EAAMF,MAC7CiB,EAAAA,KAAG,SAACE,GAAO,OAAAA,EAAIZ,gBAGZO,EAAAA,iBAAiBb,GASpBG,KAAKgB,kBAAoBC,EAAAA,WAAW,qCAPpCjB,KAAKgB,kBAAoBb,EAAUG,KACjCC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,SAACN,GAAa,OAAAA,EAAUa,wBASrChB,KAAKkB,SAAWf,EAAUG,KACxBC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,SAACN,GAAa,OAAAA,EAAUe,cACjCC,EAAAA,eAAe,WAGXC,EAAejB,EAAUG,KAC7BC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,SAACN,GAAa,OAAA,IAAIkB,EAAAA,WAAWlB,EAAUmB,eAAeC,KAAKpB,IAAYG,KAC9EG,EAAAA,WAAS,WAAO,OAAAN,EAAUe,mBA2B9B,OAvBAlB,KAAKoB,aAAejB,EAAUG,KAC5BC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,SAACN,GAAa,OAAAA,EAAUe,cACjCM,EAAAA,OAAOJ,IAGTpB,KAAKyB,SAAWtB,EAAUG,KACxBC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,SAACN,GAAa,OAAA,IAAIkB,EAAAA,WAAWlB,EAAUuB,UAAUH,KAAKpB,QAGjEH,KAAK2B,aAAevB,EAAAA,QAAGC,GAAWC,KAChCG,EAAAA,WAAS,WAAO,OAAAV,EAAKiB,qBACrBY,EAAAA,YAAU,WAAO,OAAAxB,EAAAA,GAAG,SACpByB,EAAAA,UAAQ,WAAO,OAAA9B,EAAKqB,iBAGtBpB,KAAK8B,YAAW,SAAIC,GAAkB,OAAA5B,EAAUG,KAC9CC,EAAAA,UAAUN,EAAWO,gBACrBC,EAAAA,WAAS,SAACN,GAAa,OAAAA,EAAU2B,YAAYC,MAC7CZ,EAAAA,gBAAe,KAGVa,EAAAA,iBAAchC,KAAMG,EAAWL,8BA5EzCmC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4EAYTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,oDACPC,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACM,EAAAA,4BACaC,OAAMC,WAAA,CAAA,CAAAH,KAAtCH,EAAAA,OAAMF,KAAA,CAACS,EAAAA,sBAzB2BC,EAAAA,0PCGvC,SAAAC,KAG0C,2BAHzCC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,UAAW,CAAErD,OAE2BmD","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { messaging } from 'firebase/app';\nimport { Observable, empty, of, throwError } from 'rxjs';\nimport { mergeMap, catchError, map, switchMap, concat, observeOn, defaultIfEmpty } from 'rxjs/operators';\nimport { FirebaseOptions, FirebaseAppConfig, ɵAngularFireSchedulers, FIREBASE_APP_NAME, FIREBASE_OPTIONS, ɵlazySDKProxy, ɵPromiseProxy } from '@angular/fire';\nimport { ɵfirebaseAppFactory } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\n\nexport interface AngularFireMessaging extends Omit<ɵPromiseProxy<messaging.Messaging>, 'deleteToken'|'getToken'|'requestPermission'> {};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireMessaging {\n\n  public readonly requestPermission: Observable<void>;\n  public readonly getToken: Observable<string|null>;\n  public readonly tokenChanges: Observable<string|null>;\n  public readonly messages: Observable<{}>;\n  public readonly requestToken: Observable<string|null>;\n  public readonly deleteToken: (token: string) => Observable<boolean>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n\n    const messaging = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => isPlatformServer(platformId) ? empty() : import('firebase/messaging')),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => app.messaging())\n    );\n\n    if (!isPlatformServer(platformId)) {\n\n      this.requestPermission = messaging.pipe(\n        observeOn(schedulers.outsideAngular),\n        switchMap(messaging => messaging.requestPermission()),\n      );\n    \n    } else {\n    \n      this.requestPermission = throwError('Not available on server platform.');\n    \n    }\n\n    this.getToken = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.getToken()),\n      defaultIfEmpty(null)\n    )\n\n    const tokenChanges = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(\n        switchMap(() => messaging.getToken())\n      ))\n    );\n\n    this.tokenChanges = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.getToken()),\n      concat(tokenChanges)\n    );\n\n    this.messages = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onMessage.bind(messaging)))\n    );\n\n    this.requestToken = of(undefined).pipe(\n      switchMap(() => this.requestPermission),\n      catchError(() => of(null)),\n      mergeMap(() => this.tokenChanges)\n    );\n\n    this.deleteToken = (token: string) => messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.deleteToken(token)),\n      defaultIfEmpty(false)\n    );\n\n    return ɵlazySDKProxy(this, messaging, zone);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireMessaging } from './messaging';\n\n@NgModule({\n  providers: [ AngularFireMessaging ]\n})\nexport class AngularFireMessagingModule { }\n"]}