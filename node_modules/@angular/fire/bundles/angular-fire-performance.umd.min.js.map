{"version":3,"sources":["ng://@angular/fire/performance/performance.ts","ng://@angular/fire/performance/performance.service.ts","ng://@angular/fire/performance/performance.module.ts"],"names":["AUTOMATICALLY_TRACE_CORE_NG_METRICS","InjectionToken","INSTRUMENTATION_ENABLED","DATA_COLLECTION_ENABLED","AngularFirePerformance","app","instrumentationEnabled","dataCollectionEnabled","zone","platformId","this","performance","of","undefined","pipe","switchMap","isPlatformBrowser","runOutsideAngular","import","empty","map","tap","shareReplay","bufferSize","refCount","ɵlazySDKProxy","Injectable","args","providedIn","FirebaseApp","Optional","type","Inject","NgZone","Object","decorators","PLATFORM_ID","trace$","traceId","window","entries","getEntriesByName","startMarkName_1","length","endMarkName_1","Observable","emitter","mark","next","unsubscribe","measure","started","PerformanceMonitoringService","appRef","disposable","isStable","first","it","subscribe","prototype","ngOnDestroy","ApplicationRef","AngularFirePerformanceModule","perf","_","NgModule","providers","name","source$","subscriber","traceSubscription","test","options","a","orComplete"],"mappings":"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","sourcesContent":["import { Injectable, NgZone, InjectionToken, Inject, Optional, PLATFORM_ID } from '@angular/core';\nimport { Observable, Subscription, of, empty } from 'rxjs';\nimport { tap, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { performance } from 'firebase/app';\nimport { FirebaseApp, ɵPromiseProxy, ɵlazySDKProxy } from '@angular/fire';\nimport { isPlatformBrowser } from '@angular/common';\n\n// SEMVER @ v6, drop and move core ng metrics to a service\nexport const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken<boolean>('angularfire2.performance.auto_trace');\nexport const INSTRUMENTATION_ENABLED = new InjectionToken<boolean>('angularfire2.performance.instrumentationEnabled');\nexport const DATA_COLLECTION_ENABLED = new InjectionToken<boolean>('angularfire2.performance.dataCollectionEnabled');\n\nexport interface AngularFirePerformance extends ɵPromiseProxy<performance.Performance> {};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFirePerformance {\n  \n  private readonly performance: Observable<performance.Performance>;\n\n  constructor(\n    app: FirebaseApp,\n    @Optional() @Inject(INSTRUMENTATION_ENABLED) instrumentationEnabled:boolean|null,\n    @Optional() @Inject(DATA_COLLECTION_ENABLED) dataCollectionEnabled:boolean|null,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) platformId:Object\n  ) {\n\n    this.performance = of(undefined).pipe(\n      switchMap(() => isPlatformBrowser(platformId) ? zone.runOutsideAngular(() => import('firebase/performance')) : empty()),\n      map(() => zone.runOutsideAngular(() => app.performance())),\n      tap(performance => {\n        if (instrumentationEnabled == false) { performance.instrumentationEnabled = false }\n        if (dataCollectionEnabled == false) { performance.dataCollectionEnabled = false }\n      }),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    return ɵlazySDKProxy(this, this.performance, zone);\n\n  }\n\n}\n\nconst trace$ = (traceId:string) => {\n  if (typeof window !== 'undefined' && window.performance) {\n    const entries = window.performance.getEntriesByName(traceId, 'measure') || [];\n    const startMarkName = `_${traceId}Start[${entries.length}]`;\n    const endMarkName = `_${traceId}End[${entries.length}]`;\n    return new Observable<void>(emitter => {\n      window.performance.mark(startMarkName);\n      emitter.next();\n      return { unsubscribe: () => {\n        window.performance.mark(endMarkName);\n        window.performance.measure(traceId, startMarkName, endMarkName);\n      }};\n    });\n  } else {\n    return empty();\n  }\n}\n\nexport const traceUntil = <T=any>(name:string, test: (a:T) => boolean, options?: { orComplete?: boolean }) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      a  => test(a) && traceSubscription.unsubscribe(),\n      () => {},\n      () => options && options.orComplete && traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n\nexport const traceWhile = <T=any>(name:string, test: (a:T) => boolean, options?: { orComplete?: boolean}) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  let traceSubscription: Subscription|undefined;\n  return source$.pipe(\n    tap(\n      a  => {\n        if (test(a)) {\n          traceSubscription = traceSubscription || trace$(name).subscribe();\n        } else {\n          traceSubscription && traceSubscription.unsubscribe();\n          traceSubscription = undefined;\n        }\n      },\n      () => {},\n      () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n\nexport const traceUntilComplete = <T=any>(name:string) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      () => {},\n      () => {},\n      () => traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n\nexport const traceUntilFirst = <T=any>(name:string) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      () => traceSubscription.unsubscribe(),\n      () => {},\n      () => {}\n    )\n  ).subscribe(subscriber);\n});\n\nexport const trace = <T=any>(name:string) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n  const traceSubscription = trace$(name).subscribe();\n  return source$.pipe(\n    tap(\n      () => traceSubscription.unsubscribe(),\n      () => {},\n      () => traceSubscription.unsubscribe()\n    )\n  ).subscribe(subscriber);\n});\n","import { Injectable, OnDestroy, ApplicationRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { first, tap } from 'rxjs/operators';\n\nconst IS_STABLE_START_MARK = '_isStableStart';\nconst IS_STABLE_END_MARK = '_isStableEnd';\n\nfunction markStarts() {\n    if (typeof(window) !== \"undefined\" && window.performance) {\n        window.performance.mark(IS_STABLE_START_MARK);\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst started = markStarts();\n\n@Injectable({\n    providedIn: 'any'\n})\nexport class PerformanceMonitoringService implements OnDestroy {\n\n    private disposable: Subscription|undefined;\n\n    constructor(appRef: ApplicationRef) {\n        if (started) {\n            this.disposable = appRef.isStable.pipe(\n                first(it => it),\n                tap(() => {\n                    window.performance.mark(IS_STABLE_END_MARK);\n                    window.performance.measure('isStable', IS_STABLE_START_MARK, IS_STABLE_END_MARK);\n                })\n            ).subscribe();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.disposable) { this.disposable.unsubscribe(); }\n    }\n\n}","import { NgModule, Optional } from '@angular/core';\nimport { AngularFirePerformance } from './performance';\nimport { PerformanceMonitoringService } from './performance.service';\n\n@NgModule({\n  providers: [ AngularFirePerformance ]\n})\nexport class AngularFirePerformanceModule {\n  constructor(\n    perf: AngularFirePerformance,\n    @Optional() _: PerformanceMonitoringService\n  ) {\n    // call anything here to get perf loading\n    perf.dataCollectionEnabled\n  }\n}\n"]}